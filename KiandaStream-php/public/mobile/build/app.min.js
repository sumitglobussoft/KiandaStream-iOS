window.GS.tpl = {    "getapp.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<a class="get-app" href="http://m.mobile.localhost/?noRedirect" target="_blank">\n    Looking for the Native ' + platform + " App? <span>Get It Here</span>\n</a>\n";        return __p    },    "user_menu.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<h3 class="menu-gradient menu-subheader">' + _.escape(user.fName) + '</h3>\n<ul class="menu">\n    <li id="nav-user-profile" class="menu-icon">\n        <a href="' + _.escape(GS.h.href(user.baseURL)) + '">Profile</a>\n    </li>\n    <!--<li id="nav-user-collection" class="menu-icon nav-user-collection">\n        <a href="' + _.escape(GS.h.href(user.baseURL)) + '/collection">Collection</a>\n    </li>\n -->   <li id="nav-user-favorites" class="menu-icon">\n        <a href="' + _.escape(GS.h.href(user.baseURL)) + '/favorites">Loved</a>\n    </li>\n    <li id="nav-user-playlists" class="menu-icon">\n        <a href="' + _.escape(GS.h.href(user.baseURL)) + '/playlists">Playlists</a>\n    </li>\n    <li id="nav-user-following" class="menu-icon">\n        <a href="' + _.escape(GS.h.href(user.baseURL)) + '/following">Following</a>\n    </li>\n</ul>\n';        return __p    },    "ads/image_link_ad.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<a href="' + data.href + '" target="_blank">\n    <img style="width: 300px; height: 250px" src="' + data.img + '">\n</a>\n', data.tracker && (__p += '\n<img class="ads-tracking" src="' + data.tracker + '">\n'), __p += "";        return __p    },    "shared/badge.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) {            __p += "";            var loading = !pic || !header,                subheader = subheader || !1;            __p += '\n<div class="submenu-gradient badge">\n', loading ? __p += '\n    <span class="badge-loading">Loading...</span>\n' : (__p += '\n    <img src="' + _.escape(pic) + '">\n    <div class="badge-content">\n        <h2>' + _.escape(header) + "</h2>\n        ", subheader && (__p += "\n        <h3>" + _.escape(subheader) + "</h3>\n        "), __p += "\n    </div>\n"), __p += "\n</div>\n"        }        return __p    },    "shared/show_more.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<li class="list-row list-row-more">\n    ', __p += '\n    <a class="overlay" href="' + GS.h.href(where) + '"></a>\n    <strong>' + what[0] + "</strong>\n    " + (what[1] ? what[1] + " more" : "") + "\n</li>\n";        return __p    },    "shared/release_to_load.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<li class="list-row list-row-release-to-load"><em>Release to load more</em></li>\n';        return __p    },    "little_queue/idle.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<p class="little-queue-idle">\n    ' + number + " " + (number !== 1 ? "Songs" : "Song") + " in Queue\n</p>\n";        return __p    },    "little_queue/song.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<img class="litlle-queue-image" src="' + song.picURL + '">\n<div class="little-queue-songdata">\n    <h2 class="little-queue-title">' + _.escape(song.name) + '</h2>\n    <p class="little-queue-meta">' + _.escape(song.ArtistName) + " - " + _.escape(song.AlbumName) + '</p>\n</div>\n<div class="little-queue-state loading"></div>\n';        return __p    },    "now_playing/now_playing.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<div class="now-playing">\n    <div class="progress ' + (hasSong ? "hidden" : "") + '">\n        <span class="now-playing-played">' + songProgress[0] + '</span>\n        <div class="progressbar">\n            <div class="progressbar-loaded" style="width: ' + loaded + '%"></div>\n            <div class="progressbar-progress" style="width: ' + percentage + '%">\n                <div class="progressbar-scrubber"></div>\n            </div>\n        </div>\n        <span class="now-playing-total">' + songProgress[1] + '</span>\n    </div>\n\n    <a href="' + GS.h.href("/now-playing") + '" class="button song-page-play-now hidden">Play Now</a>\n</div>\n<div class="now-playing-image">\n    ', __p += "\n    <img " + (songImage ? 'src="' + songImage + '"' : "") + ' class="' + (songImage ? "" : "hidden") + '">\n</div>\n';        return __p    },    "now_playing/queue.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) {            __p += '<div id="queue-header" class="popover-header black-bar">\n    <a class="menu-gradient button popover-back">Back</a>\n    <a class="menu-gradient button popover-switch"><span></span></a>\n</div>\n<div class="popover-content">\n</div>\n<ul id="queue-actions" class="popover-actions black-bar queue-actions">\n    <li class="queue-actions-prev"></li>\n    ';            var stateClass = "";            loading ? stateClass = "queue-actions-loading" : playing && (stateClass = "queue-actions-playing"), __p += '\n    <li class="queue-actions-paused ' + stateClass + '"></li>\n    <li class="queue-actions-next"></li>\n</ul>\n'        }        return __p    },    "now_playing/queue_actions.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<li class="queue-list-action\n            ' + (isRadioOn ? "queue-list-action-disabled" : "") + "\n            queue-list-action-ordered\n            " + (prefs.shuffle ? "queue-list-action-shuffle" : "") + '"></li>\n<li class="queue-list-action\n            ' + (isRadioOn ? "queue-list-action-disabled" : "") + "\n            queue-list-action-norepeat\n            " + (prefs.repeat ? "queue-list-action-repeat" : "") + '"></li>\n<li class="queue-list-action queue-list-action-edit"></li>\n<li class="queue-list-action queue-list-action-clear"></li>\n';        return __p    },    "now_playing/queue_actions_edit.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<li class="menu-gradient button queue-list-action-done">Done</li>\n';        return __p    },    "now_playing/queue_header.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "<h2>" + _.escape(song.name) + "</h2>\n<h3>" + _.escape(song.ArtistName) + " - " + _.escape(song.AlbumName) + "</h3>\n";        return __p    },    "now_playing/queue_song_list_row.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<li data-cid="' + song.cid + '" class="list-row song-row ' + (isCurrent ? "current" : "") + '">\n    <img src="' + song.attributes.picURL + '">\n    <a class="song-row-remove"></a>\n    <h2 class="title"> ' + _.escape(song.attributes.name) + ' </h2>\n    <h3 class="byline">' + _.escape(song.attributes.ArtistName) + " - " + _.escape(song.attributes.AlbumName) + ' </h3>\n    <span class="queue-song-row-move">\n        <a class="queue-song-row-move-up"></a>\n        <a class="queue-song-row-move-down"></a>\n    </span>\n</li>\n';        return __p    },    "pages/search/form.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) {            __p += "";            var query = query || "";            __p += '\n<form class="search" method="GET">\n    <span class="input-reduce">\n        <input type="search" placeholder="Search for Music" name="q" value="' + _.escape(query) + '">\n    </span>\n</form>\n'        }        return __p    },    "pages/search/results.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<h5 class="sub-header">Songs</h5>\n<div id="search-results-songs">\n    ', songsNumber === 0 && (__p += '\n    <p class="search-results-notfound">No songs found</p>\n    '), __p +=  '\n</div>\n<h5 class="sub-header">Playlists</h5>\n<div id="search-results-playlists">\n    ', playlistsNumber === 0 && (__p += '\n    <p class="search-results-notfound">No playlists found</p>\n    '), __p += "\n</div>\n";        return __p    },    "pages/stations/controls.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<div id="current-station">\n    <span class="station-name">' + station.title + '</span>\n</div>\n<div id="button-bar">\n    <span class="button smile">I Like This Song</span>\n    <span class="button frown">Skip It</span>\n</div>\n';        return __p    },    "pages/stations/list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "", _.each(stations, function (a) {            __p += "\n";            var b = active && active.id == a.id ? "list-row-station-playing" : "";            __p += '\n    <li data-station-id="' + a.id + '" class="list-row list-row-station ' + b + "\">\n    <h2 class='station-title'>" + a.get("title") + "</h2>\n    </li>\n"        }), __p += "\n";        return __p    },    "pages/profile/count_list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) {            __p += "";            function numberClass(a, b) {                var c = ["submenu-gradient", "list-counts-number"];                return c.push("list-counts-" + b), !a && c.push("list-counts-loading"), c.join(" ")            }            __p += '\n<ul class="list-counts">\n  <!--  <li>\n        <a href="' + GS.h.href(user.baseURL) + '/collection">\n            Collection\n            <span class="' + numberClass(library, "library") + '">\n                ' + (library || "") + '\n            <span>\n        </a>\n    </li>\n  -->  <li>\n        <a href="' + GS.h.href(user.baseURL) + '/favorites">\n            Loved\n            <span class="' + numberClass(favorites, "favorites") + '">\n                ' + (favorites || "") + '\n            <span>\n        </a>\n    </li>\n    <li>\n        <a href="' + GS.h.href(user.baseURL) + '/playlists">\n            Playlists\n            <span class="' + numberClass(playlists, "playlists") + '">\n                ' + (playlists || "") + '\n            <span>\n        </a>\n    </li>\n    <li>\n        <a href="' + GS.h.href(user.baseURL) + '/following">\n            Following\n            <span class="' + numberClass(following, "following") + '">\n                ' + (following || "") + "\n            <span>\n        </a>\n    </li>\n</ul>"        }        return __p    },    "pages/session/login.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<form class="common-form login-form">\n    <h1>Login in to Kiandastream</h1>\n\n    <p class="form-error">Wrong username or password.</p>\n\n    <fieldset>\n        <input name="username" class="input-text" type="text" placeholder="Username" autocorrect="off" autocapitalize="off" required>\n        <input name="password" class="input-text" type="password" placeholder="Password" autocorrect="off" autocapitalize="off" required>\n    </fieldset>\n\n    <input type="submit" class="large-button submit" value="Login!">\n    <a class="forgot-password" href="' + GS.h.href("/forgot") + '">Forgot password?</a>\n</form>\n';        return __p    },    "pages/session/forgot_pass.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<form class="common-form forgotpass-form">\n    <p>\n        Don\'t worry, we\'ll send an email with instructions to access your account.\n        <a href="' + GS.h.href("/login") + '">Unless you remember?</a>\n    </p>\n\n    <p class="form-notice">An email has been sent to your email address with login instructions.</p>\n    <p class="form-error">Oh no! Wrong username/password combination.</p>\n\n    <fieldset>\n        <input name="usernameOrEmail" class="input-text" type="text" placeholder="Username or Email" autocorrect="off" autocapitalize="off" required>\n    </fieldset>\n\n    <input type="submit" class="large-button submit" value="Reset password">\n</form>\n';        return __p    },    "pages/session/signup.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<form class="common-form signup-form">\n    <fieldset>\n        <input name="email" class="input-text" type="text" placeholder="Email" autocorrect="off" autocapitalize="off" required>\n        <input name="fname" class="input-text" type="text" placeholder="Display Name" autocorrect="off" autocapitalize="off" required>\n        <input name="password" class="input-text" type="password" placeholder="Password" autocorrect="off" autocapitalize="off" required>\n        <input name="password2" class="input-text" type="password" placeholder="Re-type Password" autocorrect="off" autocapitalize="off" required>\n    </fieldset>\n\n    <label><input type="checkbox"> I agree to the <a href="http://www.mobile.localhost/terms">The Terms Of Service</a></label>\n\n    <input type="submit" class="large-button submit" value="Continue">\n</form>\n';        return __p    },    "playlists/list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "", _.each(models, function (a, b) {            __p += "\n";            var c = a.attributes,                d = c.PlaylistID;            __p += '\n<li data-playlist-id="' + d + '" class="list-row playlist-row">\n    <a class="overlay" href="' + GS.h.href(c.baseURL) + '"></a>\n    <h2 class="title">' + _.escape(c.Name) + "</h2>\n</li>\n"        }), __p += "\n";        return __p    },    "albums/list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "", _.each(models, function (a, b) {            __p += "\n";            var c = a.attributes,                d = c.AlbumID;            __p += '\n<li data-album-id="' + d + '" class="list-row album-row">\n    <a class="overlay" href="' + GS.h.href(c.baseURL) + '"></a>\n    <img src="' + c.picURL + '">\n    <h2 class="title">' + _.escape(c.Name) + "</h2>\n</li>\n"        }), __p += "\n";        return __p    },    "users/list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "", _.each(models, function (a, b) {            __p += "\n";            var c = a.attributes,                d = c.userID;            __p += '\n<li data-user-id="' + d + '" class="list-row user-row">\n    ', c.picURL && (__p += '\n    <img src="' + c.picURL + '">\n    '), __p += '\n    <a class="overlay" href="' + GS.h.href(c.baseURL) + '"></a>\n    <h2 class="title">' + _.escape(c.fName) + "</h2>\n</li>\n"        }), __p += "\n";        return __p    },    "song_list/context_menu.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<ul class="context-menu">\n    <li class="play-now">Play now</li>\n    <li class="play-next">Play next</li>\n    <li class="play-last">Play last</li>\n</ul>\n';        return __p    },    "song_list/header.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += '<span class="submenu-gradient list-header-left button list-header-play-now"><span>Play (' + count + ')</span></span>\n<span class="submenu-gradient list-header-right button list-header-sort"><span>Sort</span></span>\n';        return __p    },    "song_list/sort.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "<ul>\n", __p += "\n", _.each(choices, function (a, b) {            __p += "\n    ";            var c = a[1] === sorted.field ? "selected" : "";            __p += "\n    ";            var d = a[1] === sorted.field && sorted.reverse ? "desc" : "asc";            __p += '\n    <li class="' + c + " " + d + '" action-id="' + a[1] + '">' + a[0] + "</li>\n"        }), __p += "\n</ul>\n";        return __p    },    "song_list/song_list.ejs": function (obj) {        var __p = "",            print = function () {                __p += Array.prototype.join.call(arguments, "")            };        with(obj || {}) __p += "", _.each(models, function (a, b) {            __p += "\n";            var c = a.attributes;            __p += '\n<li data-song-id="' + c.SongID + '" class="list-row song-row">\n    <a class="context-menu-button"></a>\n    <img src="' + c.picURL + '">\n    <h2 class="title"> ' + _.escape(c.name) + ' </h2>\n    <h3 class="byline"> ' + _.escape(c.ArtistName) + " </h3>\n</li>\n"        }), __p += "\n";        return __p    }},function (a, b) {    function c() {        var a = $(this),            b = a.attr("type");        return this.nodeName.toLowerCase() != "fieldset" && !this.disabled && b != "submit" && b != "reset" && b != "button" && (b != "radio" && b != "checkbox" || this.checked)    }    _.extend(Backbone.View.prototype, {        getSpinner: function () {            return this.$(".spinner")        }    }), _.mixin({        UUID: function () {            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (a) {                var b = Math.random() * 16 | 0,                    c = a == "x" ? b : b & 3 | 8;                return c.toString(16)            }).toUpperCase()        }    }), a.GS.h = {        prefix: function (a) {            return "#!" + a        },        href: function (a) {            return "/" + GS.h.prefix(a)        },        navigate: function (b) {            a.location.hash = GS.h.prefix(b)        },        getTemplate: function (a) {            if (GS.config.runMode === "dev") {                var b = document.getElementById(a);                if (b) return _.template($(b).html());                throw new Error("Can't find template " + a)            }            if (GS.tpl[a]) return GS.tpl[a];            throw new Error("Can't find compiled template " + a)        },        prettyDuration: function (a) {            var b = ~~ (a / 60),                c = ~~a - b * 60;            return [b < 10 ? "0" + b : b, c < 10 ? "0" + c : c].join(":")        },        isRetina: function () {            return a.devicePixelRatio && a.devicePixelRatio >= 2        }    }, $.fn.serializeArray = function () {        var a = [],            b;        return $(Array.prototype.slice.call(this.get(0).elements)).each(function () {            b = $(this), c.call(this) && a.push({                name: b.attr("name"),                value: b.val()            })        }), a    }, $.fn.serializeHash = function () {        var a = {}, b;        return $(Array.prototype.slice.call(this.get(0).elements)).each(function () {            b = $(this), c.call(this) && (a[b.attr("name")] = b.val())        }), a    }}(this),function (a, b) {    function c() {        this.requests = [], this.pendingRequest = null    }    function d(a, b, c, d, e) {        function f(a) {            g.isPending = !1, g.lastResolution = (new Date).valueOf()        }        this.method = a || "", this.parameters = b || {}, this.options = c || {}, this.useHTTPS = d || !1, this.useSWF = !1, this.type = "normal", this.failedAuth = !1, this.isPending = !1, this.numRetries = 0, this.lastFault = null, this.lastResolution = 0, this.successFilters = [], this.faultFilters = [], this._dfd = _.Deferred();        var g = this;        this.promise().always(f)    }    function e() {        var a = "";        for (var b = 0; b < 6; b++) a += Math.floor(Math.random() * 16).toString(16);        return a != o.lastRandomizer ? a : e()    }    function f(a) {        a = a || {};        var b = {            client: o.client,            clientRevision: o.clientRevision,            privacy: o.privacy,            country: o.country,            uuid: o.uuID        };        return o.sessionID && (b.session = o.sessionID), _.extend(b, a)    }    function g(a, b) {        a || (a = {            fault: {                message: "Empty Result",                code: o.faultCodes.EMPTY_RESULT            }        }), a.header && h(a.header), a.fault ? i(a, b) : b.resolve(typeof a.result != "undefinded" ? a.result : a)    }    function h(a) {        var b = a.session;        b && b != o.sessionID && (o.sessionID = b, o.tokenPending = !1, j()), a.expiredClient && (o.clientExpired = !0, alert("Invalid Client"))    }    function i(a, b) {        if (a && a.code) {            console.log("HANDLE FAULT CODE", a.code, b.method);            if (a.code == o.faultCodes.INVALID_TOKEN) {                var c = (new Date).valueOf();                if ((!o.lastTokenFailed || c - o.lastTokenFailed >= 3e5) && b.numRetries === 0) {                    o.lastTokenFailed = !1, b.isPending = !1, b.numRetries++, o.callsPendingToken.push(b), j();                    return                }            } else {                if (a.code == o.faultCodes.HTTP_TIMEOUT || a.code == o.faultCodes.EMPTY_RESULT) {                    b.lastFault = a, b.retry(100 + b.numRetries * 100);                    return                }                a.code != o.faultCodes.MAINTENANCE && (a.code == o.faultCodes.INVALID_CLIENT ? alert("Invalid Client") : a.code == o.faultCodes.INVALID_SESSION && alert("Session bad"))            }        }        b.reject(a)    }    function j() {        var a, b;        o.tokenPending = 1;        if (o.tokenPending) return;        k(), o.tokenPending = !0, o.sessionID ? (a = hex_md5(o.sessionID), b = d.createRequest(!1, "getCommunicationToken", {            secretKey: a        }, {}, !0), b.promise().then(l, function (a) {            m(a, b)        }), b.send()) : (b = d.createRequest(!1, "initiateSession"), b.send())    }    function k() {        o.currentToken = null, o.tokenExpires = 0    }    function l(a) {        var b = new Date;        o.lastTokenFailed = !1, o.currentToken = a, o.tokenPending = !1, o.tokenExpires = 15e5 + b.valueOf();        var c;        while (o.callsPendingToken.length) c = o.callsPendingToken.shift(), c.send()    }    function m(a, b) {        var c = new Date;        o.tokenPending = !1, o.lastTokenFailed = c.valueOf();        var d;        while (o.callsPendingToken.length) d = o.callsPendingToken.shift(), d.reject({            message: "SERVICE_CREATE_TOKEN_FAIL",            code: o.faultCodes.INVALID_TOKEN        })    }    var n = "gooeyFlubber",        o = {            faultCodes: {                INVALID_CLIENT: 1024,                RATE_LIMITED: 512,                INVALID_TOKEN: 256,                INVALID_SESSION: 16,                MAINTENANCE: 10,                MUST_BE_LOGGED_IN: 8,                HTTP_TIMEOUT: 6,                PARSE_ERROR: 4,                HTTP_ERROR: 2,                EMPTY_RESULT: -256            },            headers: {                client: "mobileshark",                clientRevision: "20120830"            },            revToken: n,            defaultEndpoint: "more.php",            uuID: _.UUID(),            country: {                ID: "1",                CC1: "0",                CC2: "0",                CC3: "0",                CC4: "0",                IPR: "1"            },            sessionID: null,            privacy: 0,            currentToken: null,            tokenExpires: 0,            tokenPending: !1,            lastTokenFailed: !1,            lastRandomizer: null,            downForMaintenance: !1,            lastDowntimeNotification: 0,            clientExpired: !1,            callsPendingToken: []        };    c.prototype.queue = function (a) {        function b() {            if (this.requests.length) {                this.pendingRequest = this.requests.shift();                var a = this,                    c = function () {                        a.pendingRequest = null, b.call(a)                    };                this.pendingRequest.promise().always(c), this.pendingRequest.send()            }        }        this.requests.push(a), this.pendingRequest || b.call(this)    }, d.createRequest = function (a) {        var b = [].slice.call(arguments, 1),            c = (new Date).valueOf(),            d = new this;        this.apply(d, b);        if (a) {            var e = d.getCacheKey(),                f = d.pendingCallCache[e];            f && (!f.isResolved() || c - f.lastResolution < 6e5) ? d = f : d.pendingCallCache[e] = d        }        return d    }, d.prototype.promise = function () {        return this._dfd.promise()    }, d.prototype.isResolved = function () {        return this._dfd.isResolved()    }, d.prototype.isRejected = function () {        return this._dfd.isRejected()    }, d.prototype.resolve = function (a) {        for (var b = 0; b < this.successFilters.length; b++) _.isFunction(this.successFilters[b]) && (a = this.successFilters[b](a));        this.lastResolution = (new Date).valueOf(), this._dfd.resolve(a)    }, d.prototype.resolveWith = function (a, b) {        for (var c = 0; c < this.successFilters.length; c++) _.isFunction(this.successFilters[c]) && (b = this.successFilters[c](b));        this.lastResolution = (new Date).valueOf(), this._dfd.resolveWith(a, b)    }, d.prototype.reject = function (a) {        for (var b = 0; b < this.faultFilters.length; b++) _.isFunction(this.faultFilters[b]) && (a = this.faultFilters[b](a));        this._dfd.reject(a)    }, d.prototype.rejectWith = function (a, b) {        for (var c = 0; c < this.faultFilters.length; c++) _.isFunction(this.faultFilters[c]) && (b = this.faultFilters[c](b));        this._dfd.rejectWith(a, b)    }, d.prototype.pendingCallCache = [], d.prototype.cacheKeyProps = ["method", "parameters", "type"], d.prototype.getCacheKey = function () {        var a, b, c = "";        for (a in this.cacheKeyProps) this.cacheKeyProps.hasOwnProperty(a) && (b = this[this.cacheKeyProps[a]], b instanceof String ? c += b : c += JSON.stringify(b));        return hex_md5(c)    }, d.prototype.send = function (b) {        b && b.length == 2 && this.promise().then(b[0], b[1]);        var c = this,            d = !0,            h = (new Date).valueOf();        if (this.isPending || this.isResolved()) return;        this.isPending = !0;        this.numRetries > 0 && (d = !1);        if (this.type == "facebook" || this.type == "lastfm") return;        var j = {}, k = "/" + o.defaultEndpoint + "?" + this.method;        this.useHTTPS && (k = "http://" + a.location.host + k), j.header = f(o.headers), j.method = this.method, j.parameters = this.parameters;        if (this.method === "getStreamKeyFromSongIDEx" || this.method === "getSongFromToken") j.parameters.country = j.header.country;        if (o.currentToken) {            var l;            o.lastRandomizer = e(), l = hex_sha1([this.method, o.currentToken, o.revToken, o.lastRandomizer].join(":")), j.header.token = o.lastRandomizer + l        }        if (this.useHTTPS && a.XDomainRequest) {            var m = q++;            r[m] = function (a) {                if (a.success) g(a.data, c);                else {                    var b = {};                    switch (a.error) {                        case "parsererror":                            b.code = o.faultCodes.PARSE_ERROR, b.message = "SERVICE_PARSE_JSON";                            break;                        case "timeout":                            b.code = o.faultCodes.HTTP_TIMEOUT, b.message = "SERVICE_REQUEST_TIMEOUT";                            break;                        case "error":                        case "notmodified":                        default:                            b.code = o.faultCodes.HTTP_ERROR, b.message = "SERVICE_HTTP_ERROR"                    }                    i(b, c)                }            };            var n = JSON.stringify({                id: m,                url: k,                data: j            });            if (p) try {                p.postMessage(n, "http://" + a.location.host)            } catch (t) {                console.error("http proxy error: ", t.message)            } else s.push(n);            return        }        $.ajax(_.extend({}, this.options, {            contentType: "text/plain",            dataType: "json",            type: "POST",            data: JSON.stringify(j),            cache: d,            url: k,            success: function (a, b, d) {                g(a, c)            },            error: function (a, b, d) {                var e = {};                switch (b) {                    case "parsererror":                        e.code = o.faultCodes.PARSE_ERROR, e.message = "SERVICE_PARSE_JSON";                        break;                    case "timeout":                        e.code = o.faultCodes.HTTP_TIMEOUT, e.message = "SERVICE_REQUEST_TIMEOUT";                        break;                    case "error":                    case "notmodified":                    default:                        e.code = o.faultCodes.HTTP_ERROR, e.message = "SERVICE_HTTP_ERROR"                }                i(e, c)            }        }))    }, d.prototype.retry = function (a) {        var b = this;        this.isPending = !1, this.numRetries++, _.wait(a).then(function () {            b.send()        })    }, d.prototype.queue = function (a) {        d.prototype.queues || (d.prototype.queues = {});        var b = d.prototype.queues[a];        b || (b = d.prototype.queues[a] = new c), b.queue(this)    }, a.Backbone.sync = function (a, b, c) {        c = c || {};        var e, f, g = b.url(a);        if (!g) throw new Error("No endpoint for '" + a + "' method defined in the model");        return b && (a == "create" || a == "update") && _.extend(c.parameters, b.toJSON()), c.useHTTPS && ($.ajaxSettings.beforeSend = function (a) {            a.withCredentials = !0        }), e = d.createRequest(!1, g, c.parameters || {}, {}, c.useHTTPS || !1, !1), f = e.promise(), f.then(c.success, c.error), e.send(), f    }, GS.config && GS.config.sessionID && (o.sessionID = GS.config.sessionID), GS.config && GS.config.country && (o.country = GS.config.country);    if (a.XDomainRequest) {        var p, q = 1,            r = {}, s = [];        a.addEventListener("message", function (b) {            if (b.origin != "http://" + a.location.host) return;            try {                var c = JSON.parse(b.data);                if (c.id === 0 && c.data == "loaded") {                    p = b.source;                    for (var d = 0, e = s.length; d < e; d++) p.postMessage(s[d], "http://" + a.location.host);                    s = []                } else c.id && r[c.id] && (r[c.id](c), delete r[c.id])            } catch (f) {                console.error("cannot read JSON data from http proxy: ", f.data)            }        }, !1);        var t = document.createElement("iframe");        t.src = "http://" + a.location.host + "/httpProxy.html", t.style.height = "300px", t.style.position = "absolute", t.style.left = "-400px", t.style.width = "200px", document.body.appendChild(t)    }}(this),function (a, b) {    var c = Backbone.Model.extend({        url: function (a) {            return {                read: "userForgotPassword"            }[a]        },        parse: function (a, b) {            this.trigger(a ? "success" : "fail")        }    });    a.GS.models.restorePass = new c}(this),function (a, b) {    function c(b, c) {        var d, e = "http://" + a.location.hostname + ":8081/stream.php";        return d = b.match(/(.+?)\./)[1], e + "?" + [            ["server", d],            ["streamKey", c]        ].map(function (a) {            return a.join("=")        }).join("&")    }    function d(b, c) {        return "http://" + b + "/stream.php?streamKey=" + c;    }    var e = Backbone.Model.extend({        idAttribute: "SongID",        set: function (a, b) {            var c = a;            c.SongID && (c.SongID = parseInt(c.SongID, 10));            if (c.CoverArtFilename) {                var d = c.CoverArtFilename.match(/\/s(.+\..+)$/);                d && d[1] && (c.CoverArtFilename = d[1])            }            c.CoverArtFilename === "default.png" && (c.CoverArtFilename = null);            if (c.Name || c.SongName) c.name = c.Name || c.SongName;            return c.Token && (c.token = c.token || c.Token, delete c.Token), this.attributes.picURL || (GS.h.isRetina() ? c.picURL = e.picHD + (c.CoverArtFilename || "album.png") : c.picURL = e.picSD + (c.CoverArtFilename || "album.png")), this.attributes.coverURL500 || (c.coverURL500 = e.pic500 + (c.CoverArtFilename || "album.png")), c.TS = c.TSAdded || c.TSFavorited, c.TS && (c.TS = Date.parse(c.TS)), c.TrackNum && (c.TrackNum = parseInt(c.TrackNum, 10)), Backbone.Model.prototype.set.call(this, c, b)        },        stream: function () {            return this._stream || (this._stream = new h({                song: this            })), this._stream        }    }, {        picSD: "http://kiandastream.com/static/albums/",        picHD: "http://kiandastream.com/static/albums/",        pic500: "http://kiandastream.com/static/albums/"    }),        f = e.extend({            url: function () {                return "getSongFromToken"            }        }),        g = Backbone.Collection.extend({            model: e,            initialize: function (a, b) {                b = b || {}, b.sortBy = b.sortBy || "default", this.comparator = g.comparators[b.sortBy], this._sorted = {                    field: b.sortBy,                    reverse: !1                }            },            sortBy: function (a) {                var b, c;                if (this._sorted && a === this._sorted.field) b = this.models.reverse(), this._sorted.reverse = !this._sorted.reverse;                else {                    c = g.comparators[a];                    if (typeof c == "undefined") throw new Error("Collection doesn't know how to sort itself with '" + a + "'");                    typeof c == "function" ? b = Backbone.Collection.prototype.sortBy.call(this, c) : b = this.models, this._sorted = {                        field: a,                        reverse: !1                    }                }                return this.models = b, this            }        }, {            comparators: {                age: function (a) {                    return (new Date).getTime() - a.attributes.TS                },                song: function (a) {                    return a.attributes.Name                },                artist: function (a) {                    return a.attributes.ArtistName                },                track: function (a) {                    return a.attributes.TrackNum                },                album: function (a) {                    return a.attributes.AlbumName                },                "default": !1            }        }),        h = Backbone.Model.extend({            initialize: function (a) {                if (!a.song) throw new Error("No idea how to stream song w/o a song.");                this.song = a.song, this.id = this.song.id            },            url: function (a) {                return {                    read: "getStreamKeyFromSongIDEx",                    downloaded: "markSongDownloadedEx",                    "30sec": "markStreamKeyOver30Seconds",                    played: "markSongQueueSongPlayed",                    completed: "markSongComplete"                }[a]            },            fetch: function (a) {                return a = a || {}, a.parameters = {                    prefetch: !1,                    mobile: !0,                    songID: this.id                }, Backbone.Model.prototype.fetch.call(this, a)            },            mark: function (a) {                return a = a || {}, a.parameters = {                    streamKey: this.get("streamKey"),                    streamServerID: this.get("streamServerID"),                    songID: this.id                }, a.method === "played" && _.extend(a.parameters, {                    songQueueID: 0,                    songQueueSongID: 0                }), a.method === "completed" && _.extend(a.parameters, {                    song: {                        songID: this.song.get("SongID"),                        songName: this.song.get("name"),                        albumID: this.song.get("AlbumID"),                        albumName: this.song.get("AlbumName"),                        artistID: this.song.get("ArtistID"),                        artistName: this.song.get("ArtistName"),                        artFilename: this.song.get("CoverArtFilename"),                        track: this.song.get("TrackNum"),                        token: this.get("FileToken")                    }                }), Backbone.sync.call(this, a.method, this, a)            },            parse: function (a, b) {                return !a || a && a.length === 0 ? (this.trigger("error", this, a, b), !1) : (a.url = d(a.ip, a.streamKey), a)            }        });    a.GS.models.Song = e, a.GS.models.Token = f, a.GS.models.Songs = g}(this),function (a, b) {    var c = Backbone.Model.extend({        idAttribute: "AlbumID",        initialize: function () {            this.songs = new GS.models.Songs([], {                sortBy: "track"            })        },        set: function (a, b) {            a.CoverArtFilename || (a.CoverArtFilename = a.AlbumID + ".jpg"), GS.h.isRetina() ? a.picURL = c.picHD + a.CoverArtFilename : a.picURL = c.picSD + a.CoverArtFilename;            if (a.Name || a.AlbumName) a.name = a.Name || a.AlbumName;            var d = _.str.slugify(a.name) || "~";            return a.baseURL = "/album/" + d + "/" + a.AlbumID, Backbone.Model.prototype.set.call(this, a, b)        },        url: function (a) {            return {                load: "albumGetAllSongs",                read: "getAlbumByID"            }[a]        },        fetch: function (a) {            return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                albumID: this.id            }), this.songs.length === 0 && this.load(), Backbone.Model.prototype.fetch.call(this, a)        },        load: function () {            var a = this;            return (this.sync || Backbone.sync).call(this, "load", this, {                parameters: {                    albumID: this.id                },                success: function (b, c, d) {                    a.songs.reset(a.parse(b))                },                error: function () {                    a.trigger("error")                }            })        }    }, {        picSD: "http://kiandastream.com/albums/80_",        picHD: "http://kiandastream.com/albums/120_"    });    a.GS.models.Album = c;    var d = Backbone.Collection.extend({        model: GS.models.Album    });    a.GS.models.Albums = d}(this),function (a, b) {    var c = Backbone.Model.extend({        idAttribute: "PlaylistID",        initialize: function () {            this.songs = new GS.models.Songs([], {                sortBy: "default"            })        },        set: function (a, b) {            a.Picture || (a.Picture = "playlist.png"), GS.h.isRetina() ? a.picURL = c.picHD + a.Picture : a.picURL = c.picHD + a.Picture;            var d = _.str.slugify(a.Name) || "~";            return a.baseURL = "/playlist/" + d + "/" + a.PlaylistID, Backbone.Model.prototype.set.call(this, a, b)        },        url: function (a) {            return {                read: "getPlaylistByID"            }[a]        },        fetch: function (a) {            return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                playlistID: this.id            }), Backbone.Model.prototype.fetch.call(this, a)        },        parse: function (a) {            return a.Songs && this.songs.reset(a.Songs), a        }    }, {        picHD: "http://radio.montrealtel.com/static/broadcasts/covers/120_"    });    a.GS.models.Playlist = c;    var d = Backbone.Collection.extend({        model: GS.models.Playlist,        comparator: function (a) {            return a.get("Name")        }    });    a.GS.models.Playlists = d}(this),function (a, b) {    var c = GS.models.Songs.extend({        initialize: function (a, b) {            b = b || {};            if (!b.userID) throw new Error("Can not create Library w/o user id.");            this.userID = parseInt(b.userID, 10), b.sortBy = "age", GS.models.Songs.prototype.initialize.call(this, a, b)        },        url: function () {            return "userGetSongsInLibrary"        },        fetch: function (a) {            return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                userID: this.userID,                page: 0            }), GS.models.Songs.prototype.fetch.call(this, a)        },        parse: function (a) {            return a.Songs        },        isYou: function () {            return GS.models.session.isYou(this.userID)        }    });    a.GS.models.Library = c;    var d = GS.models.Songs.extend({        initialize: function (a, b) {            b = b || {};            if (!b.userID) throw new Error("Can not create Favorites w/o user id.");            this.userID = parseInt(b.userID, 10), b.sortBy = "age", GS.models.Songs.prototype.initialize.call(this, a, b)        },        url: function () {            return "getFavorites"        },        fetch: function (a) {            return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                userID: this.userID,                ofWhat: "Songs"            }), GS.models.Songs.prototype.fetch.call(this, a)        },        isYou: function () {            return GS.models.session.isYou(this.userID)        }    });    a.GS.models.Favorites = d;    var e = GS.models.Playlists.extend({        initialize: function (a, b) {            b = b || {};            if (!b.userID) throw new Error("Can not fetch user playlists w/o user id");            this.userID = parseInt(b.userID, 10)        },        url: function (a) {            return "userGetPlaylists"        },        fetch: function (a) {            return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                userID: this.userID            }), Backbone.Collection.prototype.fetch.call(this, a)        },        parse: function (a) {            return a.Playlists        },        isYou: function () {            return GS.models.session.isYou(this.userID)        }    });    a.GS.models.UserPlaylists = e;    var f = Backbone.Model.extend({        idAttribute: "userID",        set: function (a, b) {            var c = {};            _.each(a, function (a, b) {                a && (b = b.replace(/^./, function (a) {                    return a.toLowerCase()                }), c[b] = a)            }), c.picture || (c.picture = "user.png"), c.picture && (GS.h.isRetina() ? c.picURL = f.picHD + c.picture : c.picURL = f.picSD + c.picture);            var d = _.str.slugify(c.fName) || "~";            return c.baseURL = "/user/" + d + "/" + c.userID, Backbone.Model.prototype.set.call(this, c, b)        }    }, {        picSD: "http://static.mobile.localhost/users/40_",        picHD: "http://static.mobile.localhost/users/80_"    }),        g = Backbone.Collection.extend({            model: f,            initialize: function (a, b) {                if (!b.userID) throw new Error("No idea how to load users following w/o user id");                this.userID = b.userID            },            url: function () {                return "getFavorites"            },            fetch: function (a) {                return a = a || {}, a.parameters = a.parameters || {}, _.extend(a.parameters, {                    userID: this.userID,                    ofWhat: "Users"                }), Backbone.Collection.prototype.fetch.call(this, a)            },            isYou: function (a) {                return GS.models.session.isYou(this.userID)            }        });    a.GS.models.Following = g;    var h = f.extend({        initialize: function () {            this.bind("change", function () {                this.id && (this.createCollections(), this.trigger("log:in"))            }, this), this.bind("destroy", function () {                this.clear({                    silent: !0                }), delete this.id, this.unbindCollections(), this.library.unbind("reset"), delete this.library, this.favorites.unbind("reset"), delete this.favorites, this.following.unbind("reset"), delete this.following, this.playlists.unbind("reset"), delete this.playlists, this.trigger("log:out")            }, this), this.id && this.createCollections()        },        createCollections: function () {            this.library = this.library || new GS.models.Library([], {                userID: this.id            }), this.favorites = this.favorites || new GS.models.Favorites([], {                userID: this.id            }), this.playlists = this.playlists || new GS.models.UserPlaylists([], {                userID: this.id            }), this.following = this.following || new GS.models.Following([], {                userID: this.id            })        },        collections: ["favorites", "library", "playlists", "following"],        bindCollections: function (a, b, c) {            _.forEach(this.collections, function (d) {                this[d].bind(a, _.bind(b, c, d), c)            }, this)        },        unbindCollections: function (a, b) {            _.forEach(this.collections, function (b) {                this[b] && this[b].unbind(a)            }, this)        },        url: function (a) {            return {                read: "getUserByID",                create: "authenticateUser",                "delete": "logoutUser"            }[a]        },        sync: function (a, b, c) {            return c = c || {}, c.parameters = c.parameters || {}, c.useHTTPS = a === "create", _.extend(c.parameters, {                userID: this.id            }), Backbone.sync.call(this, a, this, c)        },        parse: function (a, b) {            return a.User ? a.User : a.userID ? a : (this.trigger("error", a), !1)        },        authenticated: function () {            return !!this.id        },        isYou: function (a) {            return a = parseInt(a, 10), a === this.id        },        isPremium: function () {            var a = parseInt(this.get("isPremium"), 10);            return a === 1        },        fetchMusic: function () {            this.favorites.length === 0 && this.favorites.fetch({                parameters: {                    ofWhat: "Songs"                }            }), this.library.length === 0 && this.library.fetch(), this.playlists.length === 0 && this.playlists.fetch(), this.following.length === 0 && this.following.fetch()        }    });    a.GS.models.User = h, a.GS.models.session = new h(GS.config.user)}(this),function (a, b) {    var c = Backbone.Model.extend({        url: function (a) {            return {                read: "getAutoplaySong",                start: "startAutoplayTag"            }[a]        },        start: function () {            this.stop({                silent: !0            }), this.bind("change", this.gotSong, this), GS.models.queue.reset(), GS.models.queue.bind("last", this.fetch, this), GS.models.queue.bind("reset", this.stop, this), this.collection.playing(this), this.fetch(), this.fetch()        },        stop: function (a) {            a = a || {}, this.unbind("change", this.gotSong), GS.models.queue.unbind("last", this.fetch), GS.models.queue.unbind("reset", this.stop), this.collection.playing(null), a.silent || this.trigger("stopped")        },        fetch: function (a) {            return a = a || {}, this.nextSong ? a.parameters = {                autoplayState: this.toJSON()            } : a.parameters = {                tagID: this.id            }, Backbone.Model.prototype.fetch.call(this, a)        },        sync: function (a, b, c) {            return this.nextSong || (a = "start"), Backbone.sync.call(this, a, this, c)        },        gotSong: function () {            GS.models.queue.length === 0 ? (GS.models.queue.playNow(this.nextSong), GS.audio.playNow(), this.trigger("readytoplay")) : GS.models.queue.addLast(this.nextSong)        },        parse: function (a, b) {            return a ? (this.nextSong = new GS.models.Song(a.nextSong), a.autoplayState) : (this.trigger("error", this, a, b), !1)        }    }),        d = Backbone.Collection.extend({            model: c,            playing: function (a) {                return typeof a != "undefined" && (this._active = a), this._active || !1            },            byName: function () {                var a = {};                return this.forEach(function (b) {                    a[b.get("title").toLowerCase()] = b.id                }), a            },            getPopular: function () {                var a = this.byName();                return _(["rock", "pop", "r&b", "rap", "jazz", "country", "blues", "classical"]).map(function (b) {                    return this.get(a[b])                }, this).filter(function (a) {                    return Boolean(a)                })            }        }),        e = new d([{            id: 1,            title: "NHL"        }, {            id: 2,            title: "EU league"        }, {            id: 6,            title: "Russian league"        }, {            id: 28,            title: "England league"        }, {            id: 29,            title: "Soccer"        }, {            id: 1170,            title: "Futball"	    }]);    a.GS.models.stations = e}(this),function (a, b) {    var c = GS.models.Songs.extend({        initialize: function (a, b) {            b = b || {}, GS.models.Songs.prototype.initialize.call(this, a, b)        },        url: function () {            return "popularGetSongs"        },        parse: function (a) {            return a.Songs        }    });    a.GS.models.popular = new c}(this),function (a, b) {    var c = Backbone.Model.extend({        url: function () {            return "getResultsFromSearch"        },        initialize: function (a, b) {            this.options = this.options || {}, this.query = b.query, this.only = b.by || !1;            if (!this.only) this.songs = new GS.models.Songs, this.playlists = new GS.models.Playlists, this.albums = new GS.models.Albums;            else switch (this.only) {                case "songs":                    this.songs = new GS.models.Songs;                    break;                case "playlists":                    this.playlists = new GS.models.Playlists;                    break;                case "albums":                    this.albums = new GS.models.Albums            }        },        fetch: function (a) {            a = a || {}, a.parameters = a.parameters || {};            var b = ["Songs", "Playlists", "Albums"];            this.only && (b = [this.only.replace(/^./, function (a) {                return a.toUpperCase()            })]), _.extend(a.parameters, {                query: this.query,                type: b,                guts: 0,                ppOverride: ""            }), Backbone.Model.prototype.fetch.call(this, a)        },        parse: function (a) {            var b = a.result || {};            return b.Songs && this.songs.reset(b.Songs), b.Playlists && this.playlists.reset(b.Playlists), b.Albums && this.albums.reset(b.Albums), b        },        haveResults: function () {            return this.only ? this[this.only].length : this.songs.length || this.albums.length || this.albums.length        }    });    a.GS.models.Search = c}(this),function (a, b) {    var c = {        store: function () {            _.delay(_.bind(function () {                a.localStorage.setItem(this.storageKey, JSON.stringify(this.toJSON()))            }, this), 50)        },        read: function () {            var b = a.localStorage.getItem(this.storageKey);            if (!b) return;            b = JSON.parse(b), this.reset && this.reset(b, {                silent: !0            }), this.set && this.set(b, {                silent: !0            })        }    }, d = Backbone.Model.extend({        storageKey: "queue-state",        initialize: function () {            this.read(), this.bind("change", this.store)        },        toggle: function (a) {            var b = this.get(a),                c = {};            c[a] = !b, this.set(c)        }    }),        e = GS.models.Songs.extend({            storageKey: "queue",            initialize: function (a, b) {                this.read(), this.preferences = b.preferences, this._current = null, this.bind("reset", function () {                    this._current = null, this._shuffleCurrent = -1, this._shuffled = []                }), this.bind("reset", this.store), this.bind("remove", this.handleRemove), this.bind("remove", this.updateShuffle), this.bind("add", this.updateShuffle), this.preferences.bind("change:shuffle", function (a, b, c) {                    b && this.reshuffle()                }, this), this.preferences.get("shuffle") && this.reshuffle()            },            reshuffle: function (a, b, c) {                this._shuffleCurrent = -1, this._shuffled = _.shuffle(this.toArray().map(function (a) {                    return a.cid                }))            },            updateShuffle: function (a, b, c) {                c = c || {};                if (c.move || !this.preferences.get("shuffle")) return;                if (this._shuffled.length === 0) {                    this._shuffled.push(a.cid);                    return                }                var d = _.indexOf(this._shuffled, a.cid);                if (d === -1) {                    var e = this._shuffleCurrent,                        f = e + 1 + Math.round(Math.random() * (this.length - (e === -1 ? 0 : e)));                    this._shuffled.splice(f, 0, a.cid)                } else this._shuffled.splice(d, 1)            },            remove: function (a, b) {                b = b || {}, b.index = this.indexOf(a), Backbone.Collection.prototype.remove.call(this, a, b)            },            handleRemove: function (a, b, c) {                if (c.move) return;                c.index === this._current ? this.moveTo(this._current === this.length ? this._current - 1 : this._current) : c.index < this._current ? this.moveTo(this._current - 1) : c.index === this.length && this.triggerLast()            },            moveTo: function (a) {                a === -1 && (a = null), this._current = a, this.trigger("move", {                    song: this.current()                }), this.triggerLast()            },            triggerLast: function () {                this._current === this.length - 1 && this.trigger("last")            },            getNext: function () {                var a = null;                if (this.preferences.get("shuffle") && !GS.models.stations.playing()) {                    var b;                    if (this._shuffleCurrent < this._shuffled.length - 1) b = this._shuffled[++this._shuffleCurrent];                    else {                        if (!this.preferences.get("repeat")) return a;                        this.reshuffle(), b = this._shuffled[++this._shuffleCurrent]                    }                    a = this.getByCid(b)                } else if (this._current === null) a = this.at(0);                else if (this._current < this.length - 1) a = this.at(this._current + 1);                else if (this._current >= this.length - 1) {                    if (!this.preferences.get("repeat")) return a;                    a = this.at(0)                }                return a            },            next: function () {                var a = this.getNext();                return a ? (this.playExisting(a), !0) : (this.trigger("ended"), !1)            },            getPrev: function () {                var a = null;                if (this.preferences.get("shuffle") && !GS.models.stations.playing()) {                    var b;                    if (this._shuffleCurrent > 0) b = this._shuffled[--this._shuffleCurrent];                    else {                        if (!this.preferences.get("repeat")) return a;                        this._shuffleCurrent = this._shuffled.length, b = this._shuffled[--this._shuffleCurrent]                    }                    a = this.getByCid(b)                } else if (this._current === 0 || this._current === null) {                    if (!this.preferences.get("repeat")) return a;                    a = this.at(this.length - 1)                } else this._current > 0 && (a = this.at(this._current - 1));                return a            },            prev: function () {                var a = this.getPrev();                return a ? (this.playExisting(a), !0) : (this.trigger("ended"), !1)            },            playNow: function (a) {                this.addNext(a);                var b = a.length || 1;                this._current !== null ? this._current += 1 : this._current = this.length - b;                if (this.preferences.get("shuffle") && this._shuffleCurrent === -1) {                    var c = this.current().cid,                        d = this._shuffled.indexOf(c);                    this._shuffled.splice(d, 1), this._shuffled.unshift(c), this._shuffleCurrent = 0                }            },            playExisting: function (a) {                var b = this.indexOf(a);                this.moveTo(b)            },            addNext: function (a) {                var b = this._current !== null ? this._current + 1 : this.length;                if (_.isArray(a)) for (var c = 0, d = a.length; c < d; c++) this.add(a[c].toJSON(), {                    at: b + c                });                else this.add(a.toJSON(), {                    at: b                });                this.store()            },            addLast: function (a) {                this.add(a.toJSON()), this.store()            },            current: function () {                return this.at(this._current)            },            moveUp: function (a) {                var b = this.indexOf(a);                this.remove(a, {                    move: !0                }), this.add(a, {                    at: b - 1,                    move: !0                }), b === this._current ? this.moveTo(b - 1) : b - 1 === this._current && this.moveTo(this._current + 1)            },            moveDown: function (a) {                var b = this.indexOf(a);                this.remove(a, {                    move: !0                }), this.add(a, {                    at: b + 1,                    move: !0                }), b === this._current ? this.moveTo(b + 1) : b + 1 === this._current && this.moveTo(this._current - 1)            }        });    _.extend(e.prototype, c), _.extend(d.prototype, c), GS.models.queuePreferences = new d({        repeat: !1,        shuffle: !1    }), GS.models.queue = new e(null, {        preferences: GS.models.queuePreferences    })}(this),function (a, b) {    var c = function () {        this.initialize()    };    _.extend(_.extend(c.prototype, Backbone.Events), {        resetErrorsCounter: function () {            this._errorsLeft = 5        },        initialize: function () {            this.resetErrorsCounter(), this.audio = document.createElement("audio"), this.audio.autoplay = !0, this.audio.preload = !0, this.audio.autobuffer = !1, this.audio.loop = !1, this.el = $("#hide-audio"), this.el.append(this.audio), this.audio.addEventListener("canplay", _.bind(function (a) {                this.trigger("player:durationchange"), this.trigger("player:loaded")            }, this)), this.audio.addEventListener("durationchange", _.bind(function () {                this.trigger("player:durationchange")            }, this)), this.audio.addEventListener("timeupdate", _.throttle(_.bind(function () {                this.trigger("player:timeupdate", {                    progress: this.getProgress(),                    loaded: this.getLoaded()                })            }, this), 1e3)), this.audio.addEventListener("play", _.bind(function () {                this.trigger("player:play")            }, this)), this.audio.addEventListener("pause", _.bind(function () {                this.trigger("player:pause")            }, this)), $.os.ios || this.audio.addEventListener("ended", _.bind(function () {                this.trigger("player:ended")            }, this)), this.audio.addEventListener("error", _.bind(function () {                this.trigger("player:error")            }, this)), this.bind("player:durationchange", this.durationChanged), this.bind("player:timeupdate", this.timeUpdate), this.bind("player:loaded", this.loaded), this.bind("player:30secpassed", function () {                this.model.stream().mark({                    method: "30sec"                })            }), this.bind("player:ended", function () {                this.model.stream().mark({                    method: "completed"                })            }), this.bind("player:ended", this.playNext), GS.models.queue.bind("remove", function (a, b, c) {                !c.move && this.getModel() === a && (GS.models.queue.length !== 0 ? (this.audio.pause(), this.playNow()) : this.stop())            }, this), GS.models.queue.bind("reset", function (a, b) {                a.length === 0 && this.stop()            }, this)        },        setModel: function (a) {            this.model = a, this.trigger("player:set-model", {                model: this.model            })        },        getModel: function () {            return this.model        },        playNext: function () {            if (this._errorsLeft <= 0) {                this.stop();                return            }            GS.models.queue.next() && this.playNow()        },        error: function () {            this._errorsLeft--, this._errorsLeft <= 0 ? this.stop() : this.playNext()        },        playNow: function () {            if (this._errorsLeft <= 0) {                this.stop();                return            }            var a = GS.models.queue.current();            this.setModel(a), this.unbind("player:error", this.error).bind("player:error", this.error), this.model.stream().clear({                silent: !0            }), this.model.stream().unbind("change", this.play), this.model.stream().bind("change", this.play, this), this.model.stream().unbind("error"), this.model.stream().bind("error", function () {                this.trigger("player:error")            }, this), this.model.stream().fetch(), this.activatePlayback()        },        activatePlayback: function () {            $.os.ios && !this._wasActivated && (this.audio.play(), this._wasActivated = !0)        },        play: function () {            this.trigger30secs = _.once(_.bind(this.trigger, this, "player:30secpassed")), this.audio.setAttribute("src", this.model.stream().get("url")), $.os.ios || (this.audio.play(), this.audio.load()), this.model.stream().mark({                method: "downloaded"            })        },        pauseResume: function () {            this.audio.paused ? this.audio.play() : this.audio.pause()        },        loaded: function () {            this.resetErrorsCounter(), GS.models.stations.playing() ? GS.tracking.trackEvent("audio", "radio_play") : GS.tracking.trackEvent("audio", "song_play"), this.trigger("player:started", {                model: this.model            }), this.model.stream().mark({                method: "played"            })        },        stop: function () {            this.audio.pause(), this.resetErrorsCounter(), this.model && (this.model.stream().unbind("error"), this.model.stream().unbind("change", this.play), this.model.stream().clear({                silent: !0            }), this.audio.setAttribute("src", ""), this.unbind("player:error", this.error), GS.models.queue.moveTo(-1)), this.trigger("player:stopped")        },        getProgress: function () {            var a = this.audio.getAttribute("src") !== "";            return a ? [this.audio.currentTime || 0, this.duration || 0] : [0, 0]        },        getLoaded: function () {            var a, b = this.audio.getAttribute("src") !== "";            return this.audio.buffered && this.audio.buffered.length >= 1 ? a = this.audio.buffered.end(0) : a = 0, b ? [a, this.duration || 0] : [0, 0]        },        durationChanged: function () {            !this.audio.duration || isNaN(this.audio.duration) ? this.duration = ~~ (this.model.stream().get("uSecs") / 1e6) : this.duration = this.audio.duration        },        timeUpdate: function () {            this.audio.currentTime && ~~this.audio.currentTime > 30 && this.trigger30secs(), $.os.ios && this.audio.ended && this.trigger("player:ended")        }    }), a.GS.audio = new c}(this),function (a, b) {    if (!$.os.android) return;    var c = Backbone.View.prototype.delegateEvents,        d = /^(\S+)\s*(.*)$/,        e;    _.extend(Backbone.View.prototype, {        delegateEvents: function (a) {            if (!a && !(a = this.events)) return;            for (var b in a) {                var e = b.match(d),                    f = e[1],                    g = e[2];                g && f === "click" && (a["touchstart " + g] = "_touchStart", a["touchend " + g] = "_touchEnd", a["touchcancel " + g] = "_touchCancel")            }            c.apply(this, arguments)        },        _touchStart: function (a) {            var b = $(a.currentTarget);            b.addClass("_active"), e = _.delay(function () {                b.removeClass("_active")            }, 350)        },        _touchEnd: function (b) {            e && a.clearTimeout(e), $(b.currentTarget).removeClass("_active")        },        _touchCancel: function (a) {            $(a.currentTarget).removeClass("_active")        }    })}(this),function (a, b) {    var c = Backbone.View.extend({        tagName: "ul",        className: "list",        templates: {},        RowHeight: 59,        initialize: function (a) {            this.options.offset = this.options.offset || [0, 0];            if (!this.templates.list) throw new Error("No idea how to render the List w/o list template");            this.$el = $(this.el), this._rendered = 0, this.loadingEl = $(GS.h.getTemplate("shared/release_to_load.ejs")()), this.render(), GS.views.scroller.bind("scroller:scrolled-bottom", this.render, this)        },        getHeight: function () {            var b = a.innerHeight - 44;            return GS.models.queue.length && (b -= 45), GS.models.stations.playing() && (b -= 44), this.options.offset[0] && (b -= 90), this.options.offset[1] && (b -= 45), b        },        updateNextFew: function () {            this._nextFew = Math.floor(this.getHeight() / this.RowHeight) + 2, this.options.renderAll && (this._nextFew = this.collection.length)        },        render: function () {            if (GS.views.app._hidden) return;            this.updateNextFew();            var a = this._rendered + this._nextFew,                b;            a >= this.collection.length && (a = this.collection.length, this.loadingEl.addClass("hidden"), GS.views.scroller.unbind("scroller:scrolled-bottom", this.render)), _.isArray(this.collection) ? b = this.collection : b = this.collection.toArray(), this.$el.append(this.loadingEl);            if (this._rendered > a) return;            var c = document.createDocumentFragment();            $(this.templates.list({                models: b.slice(this._rendered, a)            })).appendTo(c), this.renderAd(c), this.loadingEl.before(c), this._rendered += this._nextFew, this.el.parentNode || this.options.$parent.append(this.el)        },        renderAd: function (a) {            if (this.options.noAd) return;            var b = ~~ (this.getHeight() / this.RowHeight),                c = _.filter(a.childNodes, function (a, b) {                    return a.nodeType === 1                }),                d;            this._rendered === 0 ? b <= c.length ? d = b - 2 : d = c.length - 2 : c.length < b ? d = c.length - 1 : d = 3, GS.ads.milleniaList.placeAd(c[d])        },        destroy: function () {            GS.views.scroller.unbind("scroller:scrolled-bottom", this.render), this.unbind(), this.remove()        }    }),        d = c.extend({            initialize: function (a) {                _.extend(this.templates, {                    list: GS.h.getTemplate("song_list/song_list.ejs")                }), this.className += " song-list", this.menu = new GS.views.SongContextMenu, c.prototype.initialize.call(this, a)            },            destroy: function () {                return this.menu.destroy(), c.prototype.destroy.call(this)            },            events: {                "click .song-row": "playNow",                "click .context-menu-button": "toggleMenu"            },            toggleMenu: function (a) {                var b = $(a.currentTarget),                    c = b.parent(".song-row"),                    d = c.data("song-id");                d && this.menu.toggle({                    row: c,                    model: this.collection.get(d),                    onShow: function () {                        b.addClass("active")                    },                    onHide: function () {                        b.removeClass("active")                    }                })            },            playNow: function (a) {                if ($(a.target).hasClass("context-menu-button")) return;                var b = $(a.currentTarget),                    c = b.data("song-id");                c && (GS.models.queue.playNow(this.collection.get(c)), GS.audio.playNow(), GS.tracking.trackEvent("context_menu", "play_now"))            }        }, {            RowHeight: 50        });    a.GS.views.SongList = d;    var e = c.extend({        initialize: function (a) {            _.extend(this.templates, {                list: GS.h.getTemplate("albums/list.ejs")            }), this.className += " albums-list", c.prototype.initialize.call(this, a)        }    });    a.GS.views.AlbumList = e;    var f = c.extend({        initialize: function (a) {            _.extend(this.templates, {                list: GS.h.getTemplate("playlists/list.ejs")            }), this.className += " playlists-list", c.prototype.initialize.call(this, a)        }    });    a.GS.views.PlaylistList = f;    var g = c.extend({        initialize: function (a) {            _.extend(this.templates, {                list: GS.h.getTemplate("users/list.ejs")            }), this.className += " users-list", c.prototype.initialize.call(this, a)        }    });    a.GS.views.UserList = g;    var h = Backbone.View.extend({        tagName: "li",        className: "list-row menu-row",        initialize: function (a) {            this.$el = $(this.el), this.render(), this.$el.delegate(".context-menu li", "click", _.bind(this.hide, this))        },        render: function () {            this.$el.append(this.template())        },        toggle: function (a) {            this._options ? this._options.row[0] === a.row[0] ? this.hide() : (this.hide(), this._options = a, this.show()) : (this._options = a, this.show())        },        show: function () {            var a = this._options.row;            a.after(this.el), this.$el.addClass("shown"), this._options.onShow && this._options.onShow()        },        hide: function () {            this.$el.removeClass("shown"), this._options.onHide && this._options.onHide(), this._options = null        },        destroy: function () {            this._options = null, this.unbind(), this.remove()        }    });    a.GS.views.ContextMenu = h;    var i = h.extend({        template: GS.h.getTemplate("song_list/context_menu.ejs"),        events: {            "click .play-now": "playNow",            "click .play-next": "playNext",            "click .play-last": "playLast"        },        playNow: function (a) {            GS.models.queue.playNow(this._options.model), GS.audio.playNow(), GS.tracking.trackEvent("context_menu", "play_now")        },        playNext: function (a) {            GS.models.queue.addNext(this._options.model), GS.tracking.trackEvent("context_menu", "play_next")        },        playLast: function (a) {            GS.models.queue.addLast(this._options.model), GS.tracking.trackEvent("context_menu", "play_last")        }    });    a.GS.views.SongContextMenu = i;    var j = Backbone.View.extend({        className: "sort-floating",        template: GS.h.getTemplate("song_list/sort.ejs"),        initialize: function (a) {            this.$el = $(this.el)        },        render: function () {            this.$el.html(this.template({                choices: this.options.choices,                sorted: this.options.sorted            })), this.el.parentNode !== this.options.$parent[0] && this.options.$parent.append(this.$el)        },        toggle: function (a) {            a = a || {}, this.options.sorted = a.sorted || {}, this._shown ? this.hide() : this.show()        },        show: function () {            this.render(), this.$el.show(), this._shown = !0        },        hide: function () {            this.$el.hide(), this._shown = !1        },        events: {            "click li": "report"        },        report: function (a) {            var b = $(a.target);            this.trigger("choosen", {                choice: b.attr("action-id")            }), this.hide()        }    });    a.GS.views.Sort = j;    var k = Backbone.View.extend({        templates: {            header: GS.h.getTemplate("song_list/header.ejs"),            confirm: _.template('You are going to add <%= s %> <%= (s > 1) ? "songs" : "song" %>, to your Current Songs.')        },        className: "list-header",        initialize: function () {            this.$el = $(this.el), this.render()        },        render: function () {            return this.$el.html(this.templates.header({                count: this.collection.length            })), this.sort = new GS.views.Sort({                $parent: this.$el,                choices: this.options.choices            }), this.$el.appendTo(this.options.$parent), this        },        events: {            "click .list-header-sort": "toggleSort",            "click .list-header-play-now": "playAll"        },        toggleSort: function (a) {            this.sort.toggle({                sorted: this.collection._sorted            })        },        playAll: function (b) {            if (this.collection.length > 25) {                var c = this.templates.confirm({                    s: this.collection.length                });                a.confirm(c) && (GS.models.queue.playNow(this.collection.toArray()), GS.audio.playNow())            } else GS.models.queue.playNow(this.collection.toArray()), GS.audio.playNow()        }    });    a.GS.views.CollectionHeader = k;    var l = Backbone.View.extend({        initialize: function () {            this.$el = $(this.el), this.collection.bind("reset", this.render, this), this.collection.length > 0 ? this.render() : GS.views.spinner.show("Loading " + this.pageTitle + "...")        },        render: function () {            if (this._rendered) return;            GS.views.spinner.hide(), this.header = new GS.views.CollectionHeader({                $parent: this.$el,                collection: this.collection,                choices: this.choices || [                    ["Date Added", "age"],                    ["Song Title", "song"],                    ["Artist Name", "artist"]                ]            }), this.header.sort.bind("choosen", this.onSort, this), this.list = new GS.views.SongList({                $parent: this.$el,                collection: this.collection,                offset: [0, 1]            }), this._rendered = !0        },        onSort: function (a) {            if (!a.choice) throw new Error("Collection view expects Sort to return a choice");            this.list.destroy(), this.list = new GS.views.SongList({                $parent: this.$el,                collection: this.collection.sortBy(a.choice),                offset: [0, 1]            })        },        remove: function () {            this.list && (this.list = this.list.destroy()), this.header && this.header.sort && this.header.sort.unbind("choosen", this.onSort), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.Collection = l}(this),function (a, b) {    var c = Backbone.View.extend({        el: $("#app"),        renderPage: function (a) {            this.active = a, this.el.append(this.active.el), this.trigger("app:navigated", {                item: this.active.navItem,                title: this.active.pageTitle            })        },        destroyPage: function () {            this.active && (this.active.unbind(), this.active.remove(), this.active = null, this._hidden = !1, GS.views.spinner.hide())        },        hide: function () {            this.active && ($(this.active.el).hide(), this._hidden = !0)        },        show: function () {            this.active && ($(this.active.el).show(), this._hidden = !1)        },        events: {            "submit form": "submit"        },        submit: function (a) {            a.preventDefault()        }    });    a.GS.views.app = new c;    var d = Backbone.View.extend({        el: $("#main-menu"),        templates: {            searchForm: GS.h.getTemplate("pages/search/form.ejs"),            userMenu: GS.h.getTemplate("user_menu.ejs")        },        initialize: function () {            GS.views.app.bind("app:navigated", this.markActive, this), GS.models.session.bind("log:in", this.loggedIn, this), GS.models.session.bind("log:out", this.loggedOut, this), this.body = $(document.body), this.els = {}, document.documentElement.clientWidth >= 768 && (this._persistAfterClick = !0, this.show())        },        render: function () {            if (this._rendered) return;            this.els.form = $(this.templates.searchForm()), this.els.form.appendTo(this.$(".search-menu")), this.els.q = this.els.form.find("input"), this.els.q.on("focus", _.bind(this.checkIfWeWantFocus, this)), this.$html = $(document.documentElement), this.els.q.on("focus", _.bind(this.focused, this)), this.els.q.on("blur", _.bind(this.blurred, this)), GS.models.session.authenticated() ? this.loggedIn() : this.loggedOut(), this._rendered = !0, this.markActive(this._options), delete this._options        },        checkIfWeWantFocus: function (a) {            this._touched || a.target.blur()        },        disableScroll: function (a) {            a.preventDefault()        },        focused: function (a) {            this.$html.on("touchmove", this.disableScroll), _.delay(_.bind(function () {                this.$html.addClass("has-keyboard")            }, this), 0)        },        blurred: function (a) {            this.$html.off("touchmove", this.disableScroll), _.delay(_.bind(function () {                this.$html.removeClass("has-keyboard")            }, this), 0)        },        show: function () {            this._touched = !1, this.render(), this.body.addClass("show-menu"), this._persistAfterClick || GS.views.scroller.trigger("scroller:hide-addressbar"), this._shown = !0        },        hide: function () {            _.delay(_.bind(function () {                this.els.q.blur()            }, this), $.os.android ? 250 : 0), this.body.removeClass("show-menu"), this._shown = !1        },        toggle: function () {            this._shown ? this.hide() : this.show()        },        markActive: function (a) {            a = a || {};            if (!this._rendered) {                this._options = a;                return            }            var b = this.$("#nav-" + a.item);            this.active && this.active.removeClass("selected"), b && (this.active = b.addClass("selected"))        },        getElements: function () {            this.els.loggedIn = this.els.loggedIn || this.$(".menu-loggedin"), this.els.loggedOut = this.els.loggedOut || this.$(".menu-loggedout"), this.els.userMenu = this.els.userMenu || this.$("#user-menu")        },        loggedIn: function () {            this.getElements(), this.els.userMenu.html(this.templates.userMenu({                user: GS.models.session.toJSON()            })), this.els.loggedOut.hide(), this.els.loggedIn.show()        },        loggedOut: function () {            this.getElements(), this.els.userMenu.html(""), this.els.loggedOut.show(), this.els.loggedIn.hide()        },        events: function () {            var b = {                "click a": "useMenuItem",                "submit form": "doSearch",                "click #menu-logout": "doLogout"            };            return "ontouchstart" in a ? b.touchstart = "beenTouched" : b.mousedown = "beenTouched", b        },        beenTouched: function () {            this._touched = !0        },        useMenuItem: function (a) {            this._persistAfterClick || this.hide()        },        doSearch: function (a) {            var b = this.els.q.val();            if (b === "") return;            this._persistAfterClick ? this.els.q.blur() : this.hide(), this.els.q.val(""), a.preventDefault(), GS.h.navigate("/search/" + encodeURIComponent(b))        },        doLogout: function (a) {            GS.models.session.destroy()        }    });    a.GS.views.mainMenu = new d;    var e = Backbone.View.extend({        el: $("#page-header"),        initialize: function () {            GS.views.app.bind("app:navigated", this.render, this), GS.models.session.bind("log:in", this.loggedIn, this), GS.models.session.bind("log:out", this.loggedOut, this), this.els = {                title: this.$(".page-title"),                login: this.$("#header-login")            }        },        render: function (a) {            a = a || {}, a.title && this.setTitle(a.title), GS.models.session.authenticated() ? this.loggedIn() : this.loggedOut()        },        setTitle: function (a) {            this.els.title.text(a), this.updateTitle(a)        },        updateTitle: function () {            var a = document.title;            return function (b) {                document.title = b + " - " + a            }        }(),        loggedIn: function () {            this.els.login.hide()        },        loggedOut: function () {            this.els.login.show()        },        events: function () {            var b = {}, c = "ontouchstart" in a ? "touchstart" : "mousedown";            return b[c + " .menu"] = "toggleMenu", b        },        toggleMenu: function (a) {            return GS.views.mainMenu.toggle(), a.preventDefault(), !1        }    });    a.GS.views.header = new e;    var f = Backbone.View.extend({        el: $("#loading"),        message: function (a) {            this.messageEl && this.messageEl.remove(), a = _.escape(a), this.messageEl = $(this.make("p", {                "class": "message"            }, a)), this.el.append(this.messageEl)        },        show: function (a) {            a && this.message(a), this.el.parent().addClass("shown")        },        hide: function () {            this.el.parent().removeClass("shown")        }    });    a.GS.views.spinner = new f;    var g = Backbone.View.extend({        el: "#wrapper",        initialize: function () {            this.body = $(document.body), a.addEventListener("scroll", _.debounce(_.bind(this.onScroll, this), 100)), this.bind("scroller:hide-addressbar", this.hideAddressbar, this), GS.views.app.bind("app:navigated", this.hideAddressbar, this), this.bind("scroller:little-queue", this.makeRoomForLQ, this), this.bind("scroller:little-queue-hide", this.removeRoomForLQ, this), this.bind("scroller:station", this.makeRoomForStation, this), this.bind("scroller:station-hide", this.removeRoomForStation, this)        },        scrollTo: function () {            $.os.ios && (this._fixFixed = this._fixFixed || $(".fix-fixed")), $.os.ios && this._fixFixed.addClass("reset"), a.scrollTo.apply(a, arguments), $.os.ios && this._fixFixed.removeClass("reset")        },        onScroll: function () {            var b = document.body.scrollHeight,                c = a.innerHeight,                d = a.pageYOffset;            $.os.iphone && (c += 60), d + c + 5 >= b && this.trigger("scroller:scrolled-bottom")        },        hideAddressbar: function () {            _.delay(_.bind(function () {                document.body.scrollHeight > a.innerHeight && this.scrollTo(0, 1)            }, this), 750)        },        makeRoomForLQ: function () {            this.body.addClass("room-for-little-queue")        },        removeRoomForLQ: function () {            this.body.removeClass("room-for-little-queue")        },        makeRoomForStation: function () {            this.body.addClass("room-for-station")        },        removeRoomForStation: function () {            this.body.removeClass("room-for-station")        }    });    a.addEventListener("DOMContentLoaded", function () {        GS.views.scroller = new g    })}(this),function () {    var a = Backbone.View.extend({        attachCloseListener: function () {            if (this.wasShown()) return;            var a = $(document.body),                b = "tap",                c = _.bind(function (d) {                    _.delay(_.bind(this.hide, this), this._delay || 0), window.localStorage.setItem(this.storageKey, JSON.stringify(!0)), a.unbind(b, c)                }, this);            a.bind(b, c)        },        wasShown: function () {            return JSON.parse(window.localStorage.getItem(this.storageKey))        },        hide: function () {            this.$el.hide()        }    }),        b = a.extend({            el: $("#ios-pin"),            storageKey: "pinnotification:shown",            initialize: function () {                this.$el = $(this.el), this.attachCloseListener()            },            show: function () {                this.wasShown() || this.$el.show()            }        }),        c = a.extend({            id: "get-app",            storageKey: "getapp:shown",            template: GS.h.getTemplate("getapp.ejs"),            initialize: function () {                this.$el = $(this.el), this.attachCloseListener(), $.os.iphone ? this.platform = "iPhone" : $.os.ipad ? this.platform = "iPad" : $.os.webos ? this.platform = "Blackberry" : $.os.touchpad ? this.platform = "Touchpad" : $.os.android && (this.platform = "Android"), GS.views.app.bind("app:navigated", this.show, this)            },            render: function () {                this.$el.html(this.template({                    platform: this.platform                })), $(GS.views.app.active.el).prepend(this.el)            },            show: function () {                this.render(), this.wasShown() || this.$el.show(), GS.views.app.unbind("app:navigated", this.show)            },            wasShown: function () {                return !1            },            events: {                "click a": "click"            },            click: function (a) {                this._delay = 300            }        });    window.addEventListener("DOMContentLoaded", function () {        /autoRedirected/.test(document.cookie) ? (document.cookie = "autoRedirected=; expires=Thu, 01 Jan 1970 00:00:00 GMT;", GS.views.getapp = new c) : $.os.iphone && (GS.views.pinnotif = new b, GS.views.pinnotif.show())    })}(),function (a, b) {    var c = Backbone.View.extend({        template: GS.h.getTemplate("pages/stations/list.ejs"),        navItem: "stations",        pageTitle: "Stations",        initialize: function (a) {            this.$el = $(this.el), this.els = {                list: $(this.make("ul", {                    className: "list"                }))            }, this.render(), this.collection.bind("stopped", this.stop, this)        },        render: function () {            var a = this.options.stations || this.collection.sortBy(function (a) {                return a.get("title")            });            this.els.list.html(this.template({                stations: a,                active: this.collection.playing()            })), this.$el.append(this.els.list)        },        start: function (b) {            if (GS.models.queue.length > 0 && !a.confirm("You have music in your Current Songs. Would you like to clear those songs and start your Radio Station?")) return;            this.station = this.collection.get(b), GS.views.spinner.show("Loading " + this.station.get("title") + " Radio"), this.station.start(), GS.views.Radio.instance(this.station), this.station.bind("readytoplay", this.play, this), this.station.bind("error", this.error, this), GS.audio.activatePlayback()        },        play: function () {            GS.views.spinner.hide(), this.stationEl.addClass("list-row-station-playing")        },        error: function () {            GS.views.spinner.hide(), a.alert("Something went wrong, please try another station")        },        stop: function () {            this.stationEl && (this.stationEl.removeClass("list-row-station-playing"), this.stationEl = null)        },        events: {            "click .list-row-station": "click"        },        click: function (a) {            var b = $(a.currentTarget),                c = this.$el.find(".list-row-station-playing");            c.length ? b.hasClass("list-row-station-playing") ? GS.audio.playNext() : c.length && c[0] !== b[0] && (c.removeClass("list-row-station-playing"), this.stationEl = b, this.start(this.stationEl.data("station-id"))) : (this.stationEl = b, this.start(this.stationEl.data("station-id")))        }    });    a.GS.views.StationsList = c;    var d = GS.views.Collection.extend({        navItem: "popular",        pageTitle: "Popular Songs",        choices: [            ["Popularity", "default"],            ["Song Title", "song"],            ["Artist Name", "artist"],            ["Album Name", "album"]        ]    });    a.GS.views.Popular = d}(this),function (a, b) {    var c = Backbone.View.extend({        templates: {            badge: GS.h.getTemplate("shared/badge.ejs"),            list: GS.h.getTemplate("albums/list.ejs")        },        initialize: function () {            this.collection = this.model.songs, this.$el = $(this.el), this.els = {                badge: $("<div>"),                header: $("<div>"),                list: $("<div>")            }, this.$el.append(this.els.badge), this.$el.append(this.els.header), this.collection.length > 0 ? this.renderList() : GS.views.spinner.show("Loading album..."), this.model.bind("change", this.renderBadge, this), this.collection.bind("reset", this.renderHeader, this), this.collection.bind("reset", this.renderList, this)        },        renderHeader: function () {            this.header = new GS.views.CollectionHeader({                $parent: this.els.header,                collection: this.collection,                choices: [                    ["Track Number", "track"],                    ["Song Title", "song"],                    ["Artist Name", "artist"],                    ["Album Name", "album"]                ]            }), this.header.sort.bind("choosen", this.onSort, this)        },        renderBadge: function () {            GS.views.header.setTitle(this.model.get("name")), this.els.badge.html(this.templates.badge({                pic: this.model.get("picURL"),                header: this.model.get("name"),                subheader: "by " + this.model.get("ArtistName")            }))        },        renderList: function () {            GS.views.spinner.hide(), this.list = new GS.views.SongList({                $parent: this.els.list,                collection: this.collection,                offset: [1, 1]            }), this.$el.append(this.els.list)        },        onSort: function (a) {            if (!a.choice) throw new Error("Collection view expects Sort to return a choice");            this.list.destroy(), this.list = new GS.views.SongList({                $parent: this.els.list,                collection: this.collection.sortBy(a.choice),                offset: [1, 1]            })        },        remove: function () {            return this.model.unbind("change", this.renderBadge), this.collection.unbind("reset", this.renderHeader), this.collection.unbind("reset", this.renderList), this.list && this.list.destroy(), this.header && this.header.sort && this.header.sort.unbind("choosen", this.onSort), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.AlbumPage = c;    var d = Backbone.View.extend({        initialize: function () {            this.$el = $(this.el), this.collection.length > 0 ? this.render() : (GS.views.spinner.show("Loading albums..."), this.collection.bind("reset", this.render, this))        },        render: function () {            GS.views.spinner.hide(), this.list = new GS.views.AlbumList({                $parent: this.$el,                collection: this.collection            })        },        remove: function () {            return this.list && this.list.destroy(), this.collection.unbind("reset", this.render), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.AlbumCollection = d}(this),function (a, b) {    var c = Backbone.View.extend({        templates: {            badge: GS.h.getTemplate("shared/badge.ejs"),            list: GS.h.getTemplate("playlists/list.ejs")        },        initialize: function () {            this.collection = this.model.songs, this.$el = $(this.el), this.els = {                badge: $("<div>"),                header: $("<div>"),                list: $("<div>")            }, this.$el.append(this.els.badge), this.$el.append(this.els.header), this.collection.length > 0 ? (this.renderHeaders(), this.renderList()) : GS.views.spinner.show("Loading playlist..."), this.model.bind("change", this.renderHeaders, this), this.collection.bind("reset", this.renderList, this)        },        renderHeaders: function () {            var a = this.model.get("Username"),                b = a.split(" ")[0],                c = this.model.get("SubscriberCount"),                d = a;            GS.views.header.setTitle(b + "'s playlist"), c && (d += ", " + c + " subscriber" + (c > 1 ? "s" : "")), this.header = new GS.views.CollectionHeader({                $parent: this.els.header,                collection: this.collection,                choices: [                    ["Default Order", "default"],                    ["Track Number", "track"],                    ["Song Title", "song"],                    ["Artist Name", "artist"],                    ["Album Name", "album"]                ]            }), this.header.sort.bind("choosen", this.onSort, this), this.els.badge.html(this.templates.badge({                pic: this.model.get("picURL"),                header: this.model.get("Name"),                subheader: d            }))        },        renderList: function () {            GS.views.spinner.hide(), this.list = new GS.views.SongList({                $parent: this.els.list,                collection: this.collection,                offset: [1, 1]            }), this.$el.append(this.els.list)        },        onSort: function (a) {            if (!a.choice) throw new Error("Collection view expects Sort to return a choice");            this.list.destroy(), this.list = new GS.views.SongList({                $parent: this.els.list,                collection: this.collection.sortBy(a.choice),                offset: [1, 1]            })        },        remove: function () {            return this.model.unbind("change", this.renderHeaders), this.collection.unbind("reset", this.renderList), this.list && this.list.destroy(), this.header && this.header.sort && this.header.sort.unbind("choosen", this.onSort), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.PlaylistPage = c;    var d = Backbone.View.extend({        initialize: function () {            this.$el = $(this.el), this.collection.length > 0 ? this.render() : (GS.views.spinner.show("Loading playlists..."), this.collection.bind("reset", this.render, this))        },        render: function () {            GS.views.spinner.hide(), this.list = new GS.views.PlaylistList({                $parent: this.$el,                collection: this.collection            })        },        remove: function () {            return this.list && this.list.destroy(), this.collection.unbind("reset", this.render), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.PlaylistCollection = d}(this),function (a, b) {    var c = Backbone.View.extend({        navItem: "search",        pageTitle: "Kiandastream",        className: "search-page",        templates: {            show_more: GS.h.getTemplate("shared/show_more.ejs"),            form: GS.h.getTemplate("pages/search/form.ejs"),            results: GS.h.getTemplate("pages/search/results.ejs")        },        form: function (a) {            this.$el.append(this.templates.form({                query: a || ""            })), this.els.q = this.$("form input[name=q]"), this.els.q.bind("focus", _.bind(this.hideBottom, this)), this.els.q.bind("blur", _.bind(this.showBottom, this)), this._wrapped = _.bind(this.hideKB, this), $(document.body).on("touchstart", this._wrapped)        },        hideKB: function () {            this.els.q && this.els.q.blur()        },        initialize: function (a) {            this.$el = $(this.el), this.els = {}, this.lists = [], this.form(this.options.query), this.model && (this.model.haveResults() ? this.results() : (this.model.bind("change", this.results, this), GS.views.spinner.show("Searching for " + this.options.query)))        },        results: function () {            GS.views.spinner.hide();            var a = this.model.songs.toArray().slice(0, 4),                b = this.model.albums.toArray().slice(0, 4),                c = this.model.playlists.toArray().slice(0, 4);            this.$el.append(this.templates.results({                songsNumber: a.length,                albumsNumber: b.length,                playlistsNumber: c.length            })), this.model.songs.length > 0 && (this.els.songList = this.els.songList || this.$("#search-results-songs"), this.lists.push(new GS.views.SongList({                collection: new GS.models.Songs(a),                $parent: this.els.songList,                renderAll: !0,                noAd: !0            })), this.lists[this.lists.length - 1].$el.append(this.templates.show_more({                where: "/search/songs/" + this.options.query,                what: ["Show more songs", this.model.songs.length]            }))), this.model.albums.length > 0 && (this.els.albumList = this.els.albumList || this.$("#search-results-albums"), this.lists.push(new GS.views.AlbumList({                collection: b,                $parent: this.els.albumList,                renderAll: !0,                noAd: !0            })), this.lists[this.lists.length - 1].$el.append(this.templates.show_more({                where: "/search/albums/" + this.options.query,                what: ["Show more albums", this.model.albums.length]            }))), this.model.playlists.length > 0 && (this.els.playlistList = this.els.playlistList || this.$("#search-results-playlists"), this.lists.push(new GS.views.PlaylistList({                collection: c,                $parent: this.els.playlistList,                renderAll: !0,                noAd: !0            })), this.lists[this.lists.length - 1].$el.append(this.templates.show_more({                where: "/search/playlists/" + this.options.query,                what: ["Show more playlists", this.model.playlists.length]            }))), GS.views.scroller.trigger("scroller:hide-addressbar")        },        remove: function () {            for (var a = 0; a < this.lists.length; a++) this.lists[a].destroy();            $(document.body).off("touchstart", this._wrapped), this.model && this.model.unbind("change", this.results), this.els.q.unbind("focus"), this.els.q.unbind("blur"), Backbone.View.prototype.remove.call(this)        },        events: {            "submit form": "submit",            "click .input-reduce": "autoFocus"        },        submit: function (a) {            var b = this.els.q.val();            if (b === "") return;            this.showBottom(), _.delay(_.bind(this.hideKB, this), 150), a.preventDefault(), GS.h.navigate("/search/" + encodeURIComponent(b))        },        autoFocus: function (a) {            this.els.q.focus()        },        hideBottom: function () {            this.els.hideThese || (this.els.hideThese = $(".bottombar")), this.els.hideThese.hide()        },        showBottom: function () {            this.els.hideThese.show()        }    });    a.GS.views.Search = c;    var d = GS.views.Collection.extend({        initialize: function () {            var a = this.model.query;            this.pageTitle = "'" + a + "' songs", GS.views.Collection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.SongsResults = d;    var e = GS.views.PlaylistCollection.extend({        initialize: function () {            var a = this.model.query;            this.pageTitle = "'" + a + "' playlists", GS.views.PlaylistCollection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.PlaylistsResults = e;    var f = GS.views.AlbumCollection.extend({        initialize: function () {            var a = this.model.query;            this.pageTitle = "'" + a + "' albums", GS.views.AlbumCollection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.AlbumsResults = f}(this),function (a, b) {    var c = Backbone.View.extend({        navItem: "login",        pageTitle: "Sign in",        template: GS.h.getTemplate("pages/session/login.ejs"),        initialize: function () {            this.model.bind("log:in", this.loggedIn, this), this.model.bind("error", this.error, this), this.render()        },        render: function () {            $(this.el).html(this.template()), this.$form = this.$("form")        },        loggedIn: function () {            GS.h.navigate(this.model.get("baseURL")), GS.views.spinner.hide()        },        error: function (a) {            this.$error = this.$error || this.$(".form-error"), this.$error.show(), this.$("input").one("focus", _.bind(this.hideError, this)), GS.views.spinner.hide()        },        hideError: function (a) {            this.$error.hide()        },        events: {            "submit form": "submit"        },        submit: function (a) {            var b = this.$form.serializeHash();            this.model.save(b), GS.views.spinner.show("Logging in..."), a.preventDefault()        }    });    a.GS.views.Login = c;    var d = Backbone.View.extend({        navItem: "login",        pageTitle: "Forgot Password?",        template: GS.h.getTemplate("pages/session/forgot_pass.ejs"),        initialize: function () {            this.model.bind("success", this.success, this), this.model.bind("fail", this.fail, this), this.render()        },        render: function () {            $(this.el).html(this.template()), this.$form = this.$("form")        },        success: function () {            GS.views.spinner.hide(), this.$notice = this.$notice || this.$(".form-notice"), this.$notice.show()        },        fail: function () {            GS.views.spinner.hide(), this.$error = this.$error || this.$(".form-error"), this.$error.show()        },        events: {            "submit form": "submit"        },        submit: function (a) {            var b = this.$form.serializeHash();            this.model.fetch({                parameters: b            }), GS.views.spinner.show("Requesting password reset..."), a.preventDefault()        }    });    a.GS.views.ForgotPass = d;    var e = Backbone.View.extend({        navItem: "signup",        pageTitle: "Create account",        template: GS.h.getTemplate("pages/session/signup.ejs"),        initialize: function () {            this.render()        },        render: function () {            $(this.el).html(this.template())        }    });    a.GS.views.SignUp = e}(this),function (a, b) {    var c = GS.views.Collection.extend({        pageTitle: "Collection",        initialize: function () {            this.collection.isYou() && (this.navItem = "user-collection"), GS.views.Collection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.Library = c;    var d = GS.views.Collection.extend({        pageTitle: "Loved",        initialize: function () {            this.collection.isYou() && (this.navItem = "user-favorites"), GS.views.Collection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.Favorites = d;    var e = GS.views.PlaylistCollection.extend({        pageTitle: "Playlists",        initialize: function () {            this.collection.isYou() && (this.navItem = "user-playlists"), GS.views.Collection.prototype.initialize.apply(this, arguments)        }    });    a.GS.views.UserPlaylists = e;    var f = Backbone.View.extend({        pageTitle: "Following",        initialize: function (a) {            if (!a.collection) throw new Error("No idea how to show user followers w/o a collection");            this.collection.isYou() && (this.navItem = "user-following"), this.$el = $(this.el), this.collection.length > 0 ? this.render() : GS.views.spinner.show("Loading following list..."), this.collection.bind("reset", this.render, this)        },        render: function () {            GS.views.spinner.hide();            var a = _.sortBy(this.collection.toArray(), function (a) {                return a = a.attributes, a.picURL            });            this.list = new GS.views.UserList({                $parent: this.$el,                collection: a            })        },        remove: function () {            this.list && this.list.destroy(), this.collection.unbind("reset", this.render), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.Following = f;    var g = Backbone.View.extend({        pageTitle: "Profile",        templates: {            badge: GS.h.getTemplate("shared/badge.ejs"),            list: GS.h.getTemplate("pages/profile/count_list.ejs")        },        initialize: function () {            if (this.options.model.constructor !== GS.models.User) throw new Error("Profile page expects this.options.model to be instance of User model");            GS.models.session.isYou(this.options.model.id) && (this.navItem = "user-profile"), this.$el = $(this.el), this.options.model.bind("change", this.renderBadge, this), this.options.model.bindCollections("reset", this.updateCount, this), this.els = {                badge: $("<div>"),                list: $("<div>")            }, this.render()        },        render: function () {            this.renderBadge(), this.renderList(), this.$el.append(this.els.badge).append(this.els.list)        },        renderList: function () {            var a = this.options.model;            this.els.list.html(this.templates.list({                user: a.toJSON(),                favorites: a.favorites.length,                library: a.library.length,                playlists: a.playlists.length,                following: a.following.length            }));            var b = this.els.list.find("li");            GS.ads.milleniaProfile.placeAd(b[b.length - 1])        },        updateCount: function (a, b) {            this.$(".list-counts-" + a).removeClass("list-counts-loading").text(b.length)        },        renderBadge: function () {            this.els.badge.html(this.templates.badge({                pic: this.options.model.get("picURL"),                header: this.options.model.get("fName")            }))        },        remove: function () {            return this.options.model.unbind("change", this.renderBadge), this.options.model.unbindCollections("reset", this.updateCount), Backbone.View.prototype.remove.call(this)        }    });    a.GS.views.Profile = g}(this),function (a, b) {    var c = Backbone.View.extend({        templates: {            song: GS.h.getTemplate("little_queue/song.ejs"),            idle: GS.h.getTemplate("little_queue/idle.ejs")        },        el: $("#little-queue"),        initialize: function (a) {            this.collection.length > 0 && this.render(), GS.audio.bind("player:set-model", this.gotNewSong, this), GS.audio.bind("player:started", this.started, this), GS.audio.bind("player:error", this.gotNewSong, this), GS.audio.bind("player:stopped", this.gotNewSong, this), GS.audio.bind("player:play", this.playing, this), GS.audio.bind("player:pause", this.paused, this), GS.audio.bind("player:ended", this.paused, this), this.collection.bind("add", this.render, this), this.collection.bind("remove", this.render, this)        },        gotNewSong: function (a) {            a = a || {}, a.model ? (this.song = a.model, this.renderSong()) : (this.song = null, this.render())        },        render: function () {            if (this.song) return;            this.collection.length !== 0 ? (this.el.html(this.templates.idle({                number: this.collection.length            })), this.show()) : this.hide()        },        renderSong: function (a) {            this.el.html(this.templates.song({                song: this.song.toJSON()            })), this.show(), this.$state = this.$(".little-queue-state"), this._loading = !0, this._loading || (GS.audio.audio.paused ? this.paused() : this.playing())        },        started: function () {            this.$state && this.$state.addClass("playing").removeClass("loading"), this._loading = !1        },        playing: function () {            this.$state && this.$state.addClass("playing").removeClass("paused")        },        paused: function () {            this.$state && this.$state.addClass("paused").removeClass("playing")        },        show: function () {            if (this._shown) return;            this.el.removeClass("hidden"), GS.views.scroller.trigger("scroller:little-queue"), this._shown = !0        },        hide: function () {            this.el.addClass("hidden"), GS.views.scroller.trigger("scroller:little-queue-hide"), this._shown = !1        },        events: {            click: "showQueue",            "click .little-queue-state": "playPause",            "click .litlle-queue-image": "showNowPlaying"        },        showNowPlaying: function (a) {            GS.h.navigate("/now-playing")        },        showQueue: function (a) {            if (this.$state && a.target === this.$state[0]) return !0;            GS.h.navigate("/queue")        },        playPause: function (a) {            if (this._loading) return !0;            this.collection.current() && GS.audio.pauseResume()        }    }),        d = Backbone.View.extend({            el: $("#station-controls"),            initialize: function (a) {                this.template = GS.h.getTemplate("pages/stations/controls.ejs"), this.setModel(a)            },            setModel: function (a) {                this.model && (this.model.unbind("readytoplay", this.render), this.model.unbind("stopped", this.hide)), this.model = a, this.model.bind("readytoplay", this.render, this), this.model.bind("stopped", this.hide, this), GS.audio.bind("player:set-model", function () {                    this.$smile || (this.$smile = this.$(".smile")), this.$smile.removeClass("inactive")                }, this)            },            render: function () {                this.el.html(this.template({                    station: this.model.toJSON()                })), this.el.removeClass("hidden"), GS.views.scroller.trigger("scroller:station")            },            hide: function () {                this.el.addClass("hidden"), GS.views.scroller.trigger("scroller:station-hide")            },            events: {                "click .frown": "frown",                "click .smile": "smile"            },            frown: function (a) {                GS.audio.playNext()            },            smile: function (a) {                this.$smile = $(a.target), this.$smile.addClass("inactive")            }        }, {            instance: function () {                var a;                return function (b) {                    return a ? b && b !== a.model && a.setModel(b) : a = new this(b), a                }            }()        });    a.addEventListener("DOMContentLoaded", function (a) {        GS.views.littleQueue = new c({            collection: GS.models.queue        })    }), a.GS.views.Radio = d}(this),function (a, b) {    var c = Backbone.View.extend({        el: $("#ads"),        templates: {            imageAd: GS.h.getTemplate("ads/image_link_ad.ejs")        },        initialize: function () {            GS.audio.bind("player:started", this.tick, this), this._count = 0        },        delayedShow: function (a) {            _.delay(_.bind(function () {                this.render()            }, this), 1e4)        },        tick: function () {            this._count++, this._count === 1 ? this.delayedShow() : this._count === 3 && (this.render(), GS.audio.unbind("player:started", this.tick))        },        render: function () {            if (GS.models.session.isPremium()) return;            var a = ~~ ((new Date).getTime() / 1e3),                b = {                    reebok: {                        img: "http://ad.doubleclick.net/ad/N2335.150769.lalaplus/B6439398.5;sz=300x250;ord=[ts]?".replace("[ts]", a),                        href: "http://ad.doubleclick.net/jump/N2335.150769.lalaplus/B6439398.5;sz=300x250;ord=[ts]?".replace("[ts]", a)                    }                };            this.$("#ad").html(this.templates.imageAd({                data: b.reebok            })), this.el.addClass("shown")        },        events: {            click: "hide"        },        hide: function () {            this.el.removeClass("shown")        }    })}(this),function (a, b) {    var c = Backbone.View.extend({        doEncode: !1,        makeURL: function (b, c) {            var d = _(b.req).map(function (b) {                return b[1] = c ? a.encodeURI(b[1]) : b[1], b.join("=")            }).join("&");            return b.prefix + "?" + d        },        className: "list-row list-row-ad",        tagName: "li",        initialize: function () {            this.$el = $(this.el)        },        request: function (a) {            this.dfd = _.Deferred(), this.dfd.done(this.render), this.dfd.fail(this.error), $.ajaxSettings.beforeSend = function (a) {                a.withCredentials = !1            };            var b = $.ajax({                url: this.makeURL(this.options.link, this.options.doEncode),                dataType: "html",                context: this,                complete: function (b, c) {                    var d = b.responseText;                    d && d.length > 0 ? this.dfd.resolveWith(this, [a, d]) : this.dfd.rejectWith(this, [b, c])                }            });            return this.dfd        },        render: function (a, b) {            this.$el.html(b).insertAfter(a), this.$("a").attr("target", "_blank")        },        error: function () {            this.$el.remove(), console.log("Ad request failed", arguments)        },        placeAd: function (a) {            if (GS.models.session.isPremium()) return;            if (GS.h.isRetina()) return;            if (!a) throw new Error("No node to place an ad at");            this.request(a)        }    }),        d = GS.config.runMode === "dev" ? "8.8.8.8" : GS.config.IP,        e = {            prefix: "/ADS.php",            req: [                ["apid", 98404],                ["auid", d],                ["uip", d],                ["ua", a.navigator.userAgent]            ]        };    GS.ads.milleniaList = new c({        link: e    }), GS.ads.milleniaProfile = new c({        link: e    })}(this),function (a, b) {    var c = Backbone.View.extend({        templates: {            row: GS.h.getTemplate("now_playing/queue_song_list_row.ejs"),            actions: GS.h.getTemplate("now_playing/queue_actions.ejs"),            actions_edit: GS.h.getTemplate("now_playing/queue_actions_edit.ejs")        },        initialize: function () {            this.model = GS.models.queuePreferences, this._rows = {}, this.collection.bind("move", this.markActive, this), this.collection.bind("reset", this.clear, this), this.collection.bind("remove", this.removeRow, this), this.collection.bind("add", this.appendRow, this)        },        destroy: function () {            return this.editModeOff(), this.collection.unbind("move", this.markActive), this.collection.unbind("reset", this.clear), this.collection.unbind("remove", this.removeRow), this.collection.unbind("add", this.appendRow), this.activeRow = this._rows = null, this.unbind(), this.remove(), null        },        getModelForRow: function (a) {            return this.collection.getByCid(a.data("cid"))        },        getRowForModel: function (a) {            return a ? this._rows[a.cid] : null        },        isRadioOn: function () {            return !!GS.models.stations.playing()        },        render: function () {            return this.$el = $(this.el), this.$actions = $(this.make("ul", {                "class": "popover-topbar queue-list-actions"            })), this.$list = $(this.make("ul", {                "class": "list song-list queue-song-list"            })), this.renderActions(), this.collection.length !== 0 && this.collection.forEach(function (a) {                this.$list.append(this.createRow(a))            }, this), this.$el.append(this.$actions), this.$el.append(this.$list), this        },        renderActions: function (a) {            a = a || {};            var b;            a.edit ? b = this.templates.actions_edit() : b = this.templates.actions({                prefs: this.model.toJSON(),                isRadioOn: this.isRadioOn()            }), this.$actions.html(b)        },        clear: function () {            this._rows = {}, this.$list.html(""), this.$(".queue-list-action-disabled").removeClass("queue-list-action-disabled")        },        removeRow: function (a, b, c) {            var d = this.getRowForModel(a);            d.remove(), delete this._rows[a.cid]        },        createRow: function (a) {            var b, c = a === this.collection.current();            return b = $(this.templates.row({                song: a,                isCurrent: c            })), this._rows[a.cid] = b, c && (this.activeRow = b), b        },        appendRow: function (a, b, c) {            var d = this.createRow(a);            if (c.at) {                var e = this.getRowForModel(this.collection.at(c.at - 1));                e.after(d)            } else c.at === 0 ? this.$list.prepend(d) : this.$list.append(d)        },        markActive: function (a) {            var b = a.song,                c = this.getRowForModel(b);            this.unMarkActive(), c ? (c.addClass("current"), this.activeRow = c) : this.activeRow = null        },        unMarkActive: function () {            this.activeRow && this.activeRow.removeClass("current")        },        editModeOn: function () {            this._editing = !0, this.renderActions({                edit: !0            }), this.$el.addClass("queue-song-list-edit")        },        editModeOff: function () {            this._editing && this.collection.store(), this.renderActions(), this._editing = !1, this.$el.removeClass("queue-song-list-edit")        },        events: {            "click .song-row": "play",            "longTap .song-row": "edit",            "contextmenu .song-row": "edit",            "click .queue-list-action-ordered": "toggleShuffle",            "click .queue-list-action-norepeat": "toggleRepeat",            "click .queue-list-action-edit": "edit",            "click .queue-list-action-clear": "clearQueue",            "click .queue-list-action-done": "saveEdit",            "click .song-row-remove": "deleteRow",            "click .queue-song-row-move-up": "moveRowUp",            "click .queue-song-row-move-down": "moveRowDown"        },        play: function (a) {            if (this._editing) return;            var b = $(a.currentTarget),                c = this.getModelForRow(b);            !this.activeRow || b[0] !== this.activeRow[0] ? (GS.models.queue.playExisting(c), GS.audio.playNow()) : GS.audio.pauseResume()        },        toggleShuffle: function (a) {            if (this.isRadioOn()) return;            this.model.toggle("shuffle"), $(a.currentTarget).toggleClass("queue-list-action-shuffle"), GS.tracking.trackEvent("queue", "toggle_shuffle")        },        toggleRepeat: function (a) {            if (this.isRadioOn()) return;            this.model.toggle("repeat"), $(a.currentTarget).toggleClass("queue-list-action-repeat"), GS.tracking.trackEvent("queue", "toggle_repeat")        },        edit: function (a) {            a.preventDefault(), this.editModeOn(), GS.tracking.trackEvent("queue", "edit")        },        clearQueue: function (b) {            if (this.collection.length === 0) return;            a.confirm("Are you sure you want to empty your Current Songs?") && (this.collection.reset(), GS.tracking.trackEvent("queue", "clear"))        },        saveEdit: function (a) {            this.editModeOff(), GS.tracking.trackEvent("queue", "edit_save")        },        deleteRow: function (a) {            var b = $(a.target).parent(),                c = this.getModelForRow(b);            this.collection.remove(c)        },        moveRowUp: function (a) {            var b = $(a.target).parent().parent(),                c = this.getModelForRow(b);            this.collection.moveUp(c)        },        moveRowDown: function (a) {            var b = $(a.target).parent().parent(),                c = this.getModelForRow(b);            this.collection.moveDown(c)        }    }),        d = Backbone.View.extend({            template: GS.h.getTemplate("now_playing/now_playing.ejs"),            className: "now-playing-view",            initialize: function (a) {                a = a || {}, GS.audio.bind("player:set-model", this.setImage, this), GS.audio.bind("player:set-model", this.resetState, this), GS.audio.bind("player:timeupdate", this.update, this), a.song && this.setSong(a.song)            },            setSong: function (a) {                this.song && this.song.unbind("change", this.gotSong), a && (this.song = a, this.song.bind("change", this.gotSong, this), this.$progressContainer && this.$progressContainer.addClass("hidden"))            },            gotSong: function (a) {                this.$playNow.removeClass("hidden"), this.setImage({                    model: a                })            },            destroy: function () {                return GS.audio.unbind("player:set-model", this.setImage), GS.audio.unbind("player:set-model", this.resetState), GS.audio.unbind("player:timeupdate", this.update), this.song && (this.song.unbind("change", this.gotSong), this.song = null), this.unbind(), this.remove(), null            },            render: function () {                this.$el = $(this.el);                var a = GS.audio.getProgress(),                    b = GS.audio.getLoaded();                return this.$el.html(this.template({                    hasSong: !! this.song,                    songProgress: a.map(GS.h.prettyDuration),                    percentage: this.getProgressPercentage.apply(this, a),                    loaded: this.getProgressPercentage.apply(this, b),                    songImage: this.song ? null : this.getImageFromSong()                })), this.$progressContainer = this.$(".progress"), this.$playNow = this.$(".song-page-play-now"), this.$played = this.$(".now-playing-played"), this.$total = this.$(".now-playing-total"), this.$progress = this.$(".progressbar-progress"), this.$loaded = this.$(".progressbar-loaded"), this.$image = this.$(".now-playing-image img"), this.song && this.resetState(), this            },            reset: function () {                this.$playNow.addClass("hidden"), this.$progressContainer.removeClass("hidden"), this.setImage()            },            getProgressPercentage: function (a, b) {                var c = ~~ (a / (b / 100));                return c > 100 && (c = 100), c            },            setState: function (a) {                a = a || {                    current: 0,                    loaded: 0,                    total: 0                }, this.$played.html(GS.h.prettyDuration(a.current)), this.$total.html(GS.h.prettyDuration(a.total));                var b = this.getProgressPercentage(a.current, a.total),                    c = this.getProgressPercentage(a.loaded, a.total);                this.$progress.css("width", b + "%"), c !== 100 && this.$loaded.css("width", c + "%")            },            getImageFromSong: function (a) {                return a = a || this.collection.current(), a ? a.get("coverURL500") : null            },            setImage: function (a) {                a = a || {};                var b = this.getImageFromSong(a.model);                b ? this.$image.attr("src", b).removeClass("hidden") : this.$image.addClass("hidden").removeAttr("src")            },            update: function (a) {                this.setState({                    current: a.progress[0],                    loaded: a.loaded[0],                    total: a.progress[1]                })            },            resetState: function () {                this.setState()            },            events: {                "click .song-page-play-now": "playNow"            },            playNow: function (a) {                this.collection.playNow(this.song), GS.audio.playNow(), this.$playNow.addClass("hidden"), this.$progressContainer.removeClass("hidden")            }        }),        e = Backbone.View.extend({            el: $("#queue"),            templates: {                queue: GS.h.getTemplate("now_playing/queue.ejs"),                header: GS.h.getTemplate("now_playing/queue_header.ejs")            },            initialize: function (a) {                GS.audio.bind("player:set-model", this.loading, this), GS.audio.bind("player:started", this.loaded, this), GS.audio.bind("player:play", this.playing, this), GS.audio.bind("player:pause", this.paused, this), GS.audio.bind("player:ended", this.paused, this), GS.audio.bind("player:stopped", this.idle, this), this.debouncePlay = _.debounce(_.bind(GS.audio.playNow, GS.audio), 500), this._rendered = !1            },            render: function (a) {                a = a || {}, this.el.append(this.templates.queue({                    loading: this._loading,                    playing: this._playing                })), this.$header = this.$("#queue-header"), this.$switch = this.$(".popover-switch"), this.$content = this.$(".popover-content"), this.$playPause = this.$(".queue-actions-paused"), this.$actions = this.$(".queue-actions"), GS.audio.bind("player:started", this.updateHeader, this), GS.audio.bind("player:ended", this.removeSongHeader, this), GS.audio.bind("player:error", this.removeSongHeader, this), GS.audio.bind("player:stopped", this.removeSongHeader, this), this._rendered = !0            },            renderSongHeader: function (a) {                this.headerEl = $(this.templates.header({                    song: a.toJSON()                })), this.$header.append(this.headerEl)            },            removeSongHeader: function () {                this.headerEl && this.headerEl.remove()            },            updateHeader: function (a) {                this.removeSongHeader(), this.renderSongHeader(a.model)            },            loading: function () {                this._loading = !0, this.$playPause && this.$playPause.addClass("queue-actions-loading")            },            loaded: function () {                this._loading = !1, this.$playPause && this.$playPause.removeClass("queue-actions-loading")            },            playing: function () {                this._playing = !0, this.$playPause && this.$playPause.addClass("queue-actions-playing")            },            paused: function () {                this._playing = !1, this.$playPause && this.$playPause.removeClass("queue-actions-playing")            },            idle: function () {                this._playing = !1, this._loading = !1, this.$playPause && this.$playPause.removeClass("queue-actions-playing").removeClass("queue-actions-loading")            },            show: function (a) {                a = a || {}, this._rendered || this.render(), this.removeSongHeader();                var b = this.collection.current();                !this._loading && b && this.renderSongHeader(b), this.song = null, this.$actions.removeClass("hidden"), a.nowPlaying ? (this.$switch.removeClass("popover-switch-queue").addClass("popover-switch-nowplaying"), this.list && (this.list = this.list.destroy()), this.nowPlaying ? a.song ? this.nowPlaying.setSong(a.song) : this.nowPlaying.reset() : (this.nowPlaying = new d({                    collection: this.collection,                    song: a.song                }), this.$content.append(this.nowPlaying.render().el), GS.views.header.updateTitle("Now Playing")), a.song && (this.song = a.song, GS.views.spinner.show("Loading song..."), this.loading(), this.song.bind("change", this.showSongPage, this), this.$actions.addClass("hidden"))) : (this.$switch.removeClass("popover-switch-nowplaying").addClass("popover-switch-queue"), this.nowPlaying && (this.nowPlaying = this.nowPlaying.destroy()), this.list = new c({                    collection: this.collection                }), this.$content.append(this.list.render().el), GS.views.header.updateTitle("Queue")), this.el.addClass("shown"), this._shown = !0, GS.views.scroller.trigger("scroller:hide-addressbar")            },            showSongPage: function (a) {                this.removeSongHeader(), this.renderSongHeader(a), this.loaded(), GS.views.spinner.hide(), this.song.unbind("change", this.showSongPage)            },            hide: function () {                if (!this._shown) return;                this.list ? this.list = this.list.destroy() : this.nowPlaying && (this.nowPlaying = this.nowPlaying.destroy()), this.removeSongHeader(), this.el.removeClass("shown"), this._shown = !1            },            events: {                "click .popover-back": "close",                "click .popover-switch": "switchViews",                "click .queue-actions-prev": "prev",                "click .queue-actions-paused": "play",                "click .queue-actions-next": "next"            },            close: function (b) {                GS.routers.app._savedHash ? a.location.hash = GS.routers.app._savedHash : GS.h.navigate("/")            },            switchViews: function (a) {                if (this.list) {                    GS.h.navigate("/now-playing");                    return                }                if (this.nowPlaying) {                    GS.h.navigate("/queue");                    return                }            },            prev: function (a) {                if (this.collection.length === 0) return;                this.collection.prev() && (this.debouncePlay(), GS.tracking.trackEvent("queue", "previous_song"))            },            play: function (a) {                if (this._loading || this.collection.length === 0) return;                var b = this.collection.current();                b ? GS.audio.pauseResume() : this.next(), GS.tracking.trackEvent("queue", "pause_resume")            },            next: function () {                if (this.collection.length === 0) return;                this.collection.next() && (this.debouncePlay(), GS.tracking.trackEvent("queue", "next_song"))            }        });    a.GS.views.queue = new e({        collection: GS.models.queue    })}(this),function (a, b) {    var c = Backbone.Router.extend({        initialize: function () {            this.route("*unmatched", "unmatched", function (a) {                if (!a) return;                /^\!/.test(a) || this.navigate("!" + a, !0)            }), this.route("", "home", this.home), this.route("!/", "home", this.home), this.route("!/search", "search", this.search), this.route("!/search/*query", "searchResults", this.searchResults), this.route("!/search/:songs/*query", "searchSongs", this.searchByType), this.route("!/search/:albums/*query", "searchAlbums", this.searchByType), this.route("!/search/:playlists/*query", "searchPlaylists", this.searchByType), this.route("!/music/stations", "stations", this.stations), this.route("!/popular", "popular", this.popular), this.route("!/login", "login", this.login), this.route("!/forgot", "forgot", this.forgotPass), this.route("!/user/*name/:id", "userProfile", this.userProfile), this.route("!/user/*name/:id/", "userProfile", this.userProfile), this.route("!/user/*name/:id/collection", "userCollection", this.userCollection), this.route("!/user/*name/:id/music", "userCollection", this.userCollection), this.route("!/user/*name/:id/favorites", "userFavorites", this.userFavorites), this.route("!/user/*name/:id/playlists", "userPlaylists", this.userPlaylists), this.route("!/user/*name/:id/following", "userFollowing", this.userFollowing), this.route("!/playlist/*name/:id", "playlist", this.playlist), this.route("!/playlist/*name/:id/", "playlist", this.playlist), this.route("!/album/*name/:id", "album", this.album), this.route("!/album/*name/:id/", "album", this.album), this.route("!/queue", "queue", this.queue), this.route("!/now-playing", "now-playing", this.nowPlaying), this.route("!/s/*name/:token", "song", this.songPage), this.bind("all", function (a) {                var b = document.location.pathname + document.location.search + decodeURIComponent(document.location.hash);                GS.tracking.track(b)            })        },        route: function (a, b, c) {            var d = {                queue: !0,                "now-playing": !0,                song: !0            };            d[b] || (c = function (a) {                return function () {                    var b = [].slice.call(arguments, 0),                        c = this.prepare.apply(this, b);                    c || a.apply(this, b)                }            }(c)), Backbone.Router.prototype.route.call(this, a, b, c)        },        prepare: function () {            var b = a.location.hash;            return GS.views.queue.hide(), b === this._savedHash ? (GS.views.app.show(), !0) : (this._savedHash = b, GS.views.app.destroyPage(), !1)        },        home: function () {            this.search()        },        search: function () {            GS.views.app.renderPage(new GS.views.Search)        },        searchResults: function (a) {            var b = GS._cache.search,                c;            b && a === b.query ? c = b : (c = new GS.models.Search({}, {                query: a            }), GS._cache.search = c, c.fetch()), GS.views.app.renderPage(new GS.views.Search({                model: c,                query: a            }))        },        searchByType: function (a, b) {            var c = GS._cache.search,                d, e;            c && b === c.query ? e = c : (e = new GS.models.Search({}, {                by: a,                query: b            }), e.fetch()), d = e[a], a === "songs" ? this._searchSongs(e, d) : a === "albums" ? this._searchAlbums(e, d) : a === "playlists" && this._searchPlaylist(e, d)        },        _searchSongs: function (a, b) {            GS.views.app.renderPage(new GS.views.SongsResults({                model: a,                collection: b            }))        },        _searchAlbums: function (a, b) {            GS.views.app.renderPage(new GS.views.AlbumsResults({                model: a,                collection: b            }))        },        _searchPlaylist: function (a, b) {            GS.views.app.renderPage(new GS.views.PlaylistsResults({                model: a,                collection: b            }))        },        stations: function () {            GS.views.app.renderPage(new GS.views.StationsList({                collection: GS.models.stations            }))        },        popular: function () {            var a = new GS.views.Popular({                collection: GS.models.popular            });            GS.views.app.renderPage(a), GS.models.popular.length === 0 ? GS.models.popular.fetch({                parameters: {                    type: "daily"                }            }) : a.render()        },        login: function () {            GS.models.session.authenticated() ? GS.h.navigate(GS.models.session.baseURL) : GS.views.app.renderPage(new GS.views.Login({                model: GS.models.session            }))        },        signup: function () {            GS.views.app.renderPage(new GS.views.SignUp)        },        forgotPass: function () {            GS.views.app.renderPage(new GS.views.ForgotPass({                model: GS.models.restorePass            }))        },        userProfile: function (b, c) {            var d, f = GS._cache.user;            c = parseInt(c, 10), GS.models.session.isYou(c) ? d = GS.models.session : f && f.isYou(c) ? d = f : (d = new GS.models.User({                userID: c            }), a.GS._cache.user = d, d.fetch()), GS.views.app.renderPage(new GS.views.Profile({                model: d            })), d.fetchMusic()        },        userCollection: function (a, b) {            var c, d = GS._cache.user;            b = parseInt(b, 10), GS.models.session.isYou(b) ? c = GS.models.session.library : d && d.isYou(b) ? c = d.library : c = new GS.models.Library([], {                userID: b            }), GS.views.app.renderPage(new GS.views.Library({                collection: c            })), c.length === 0 && c.fetch()        },        userFavorites: function (a, b) {            var c, d = GS._cache.user;            b = parseInt(b, 10), GS.models.session.isYou(b) ? c = GS.models.session.favorites : d && d.isYou(b) ? c = d.favorites : c = new GS.models.Favorites([], {                userID: b            }), GS.views.app.renderPage(new GS.views.Favorites({                collection: c            })), c.length === 0 && c.fetch()        },        userPlaylists: function (a, b) {            var c, d = GS._cache.user;            b = parseInt(b, 10), GS.models.session.isYou(b) ? c = GS.models.session.playlists : d && d.isYou(b) ? c = d.playlists : c = new GS.models.UserPlaylists([], {                userID: b            }), GS.views.app.renderPage(new GS.views.UserPlaylists({                collection: c            })), c.length === 0 && c.fetch()        },        userFollowing: function (a, b) {            var c, d = GS._cache.user;            b = parseInt(b, 10), GS.models.session.isYou(b) ? c = GS.models.session.following : d && d.isYou(b) ? c = d.following : c = new GS.models.Following([], {                userID: b            }), GS.views.app.renderPage(new GS.views.Following({                collection: c            })), c.length === 0 && c.fetch()        },        playlist: function (a, b) {            var c, d = GS._cache.user,                e = GS.models.session;            b = parseInt(b, 10), e.playlists && e.playlists.get(b) ? c = e.playlists.get(b) : d && d.playlists.get(b) ? c = d.playlists.get(b) : c = new GS.models.Playlist({                PlaylistID: b            }), GS.views.app.renderPage(new GS.views.PlaylistPage({                model: c            })), c.songs.length === 0 && c.fetch()        },        album: function (a, b) {            var c = new GS.models.Album({                AlbumID: b            });            c.fetch(), GS.views.app.renderPage(new GS.views.AlbumPage({                model: c            }))        },        queue: function () {            GS.views.app.hide(), GS.views.queue.show()        },        nowPlaying: function () {            GS.views.app.hide(), GS.views.queue.show({                nowPlaying: !0            })        },        songPage: function (a, b) {            GS.views.app.hide();            var c = new GS.models.Token;            GS.views.queue.show({                nowPlaying: !0,                song: c            }), c.fetch({                parameters: {                    token: b                }            })        }    });    a.GS.routers.app = new c}(this),function (a, b) {    function c() {        function a(a) {            var b = document.createElement("link");            return b.rel = "stylesheet", b.type = "text/css", b.href = a, b        }        var b, c = document.getElementsByTagName("head")[0];        GS.h.isRetina() ? (b = GS.config.runMode === "dev" ? "/stylesheets/images_hd.css" : "/build/imgs_hd.min.css", c.appendChild(a(b))) : (b = GS.config.runMode === "dev" ? "/stylesheets/images_sd.css" : "/build/imgs_sd.min.css", c.appendChild(a(b)))    }    a.GS.tracking = {        comscore: function () {            return a._comscore = a._comscore || []        },        gaq: function () {            return a._gaq = a._gaq || []        },        track: function (a) {            if (GS.config.runMode === "dev") return;            this.gaq().push(["_trackPageview", a]), this.comscore().push({                c1: "2",                c2: "8187464",                c3: "",                c4: a            })        },        trackEvent: function (a, b) {            if (GS.config.runMode === "dev") return;            this.gaq().push(["_trackEvent", a, b]), this.comscore().push({                c1: "2",                c2: "8187464",                c3: "",                c4: "",                c5: b,                c6: a            })        }    }, a.addEventListener("DOMContentLoaded", function () {        c(), Backbone.history.start()    }, !1)}(this)